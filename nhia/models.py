from django.db import models
from patients.models import Patient


class NHIAPatient(models.Model):
    patient = models.OneToOneField(Patient, on_delete=models.CASCADE, related_name='nhia_info')
    nhia_reg_number = models.CharField(max_length=50, unique=True, help_text="Unique NHIA registration number")
    is_active = models.BooleanField(default=True)
    date_registered = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.patient.get_full_name()} (NHIA: {self.nhia_reg_number})"

    class Meta:
        verbose_name = "NHIA Patient"
        verbose_name_plural = "NHIA Patients"


class AuthorizationCode(models.Model):
    """
    Model for authorization codes generated by desk office for NHIA patients.
    These codes can be used to authorize services across different departments.
    """
    STATUS_CHOICES = (
        ('active', 'Active'),
        ('used', 'Used'),
        ('expired', 'Expired'),
        ('cancelled', 'Cancelled'),
    )
    
    code = models.CharField(max_length=50, unique=True, help_text="Unique authorization code")
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='authorization_codes')
    # Services that can use this authorization code
    service_type = models.CharField(
        max_length=50,
        choices=[
            ('laboratory', 'Laboratory'),
            ('radiology', 'Radiology'),
            ('theatre', 'Theatre'),
            ('inpatient', 'Inpatient'),
            ('dental', 'Dental'),
            ('opthalmic', 'Opthalmic'),
            ('ent', 'ENT'),
            ('oncology', 'Oncology'),
            ('general', 'General'),  # For any service
        ],
        help_text="Type of service this authorization code is for"
    )
    # Amount covered by this authorization code
    amount = models.DecimalField(max_digits=10, decimal_places=2, help_text="Amount covered by this authorization")
    # Expiry date for the authorization code
    expiry_date = models.DateField(help_text="Expiry date for this authorization code")
    # Status of the authorization code
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='active')
    # Any notes or remarks
    notes = models.TextField(blank=True, null=True)
    # User who generated this code
    generated_by = models.ForeignKey('accounts.CustomUser', on_delete=models.SET_NULL, null=True, blank=True)
    # Date when the code was generated
    generated_at = models.DateTimeField(auto_now_add=True)
    # Date when the code was used (if used)
    used_at = models.DateTimeField(blank=True, null=True)
    # Service instance that used this code (if used)
    used_for = models.TextField(blank=True, null=True, help_text="Reference to the service this code was used for")

    def __str__(self):
        return f"Auth Code: {self.code} for {self.patient.get_full_name()} ({self.get_status_display()})"

    def is_valid(self):
        """Check if the authorization code is still valid"""
        from django.utils import timezone
        if self.status != 'active':
            return False
        if self.expiry_date < timezone.now().date():
            return False
        return True

    def mark_as_used(self, service_reference):
        """Mark the authorization code as used"""
        from django.utils import timezone
        self.status = 'used'
        self.used_at = timezone.now()
        self.used_for = service_reference
        self.save()

    class Meta:
        verbose_name = "Authorization Code"
        verbose_name_plural = "Authorization Codes"
        ordering = ['-generated_at']