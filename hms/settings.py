"""
Django settings for hms project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decimal import Decimal



# Load environment variables from .env file
from core.env_loader import load_env_file
load_env_file()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    if os.environ.get('DEBUG', 'False') == 'True':
        SECRET_KEY = 'django-dev-key-change-in-production-make-it-very-long-and-random-at-least-50-chars'
    else:
        raise ValueError("SECRET_KEY environment variable must be set in production")

# Validate SECRET_KEY strength
if len(SECRET_KEY) < 50:
    import warnings
    warnings.warn("SECRET_KEY should be at least 50 characters long for security")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,testserver').split(',')

# Security settings - Apply based on environment variables or DEBUG setting
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'False' if DEBUG else 'True') == 'True'
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'False' if DEBUG else 'True') == 'True'
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False' if DEBUG else 'True') == 'True'

# HSTS settings
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '0' if DEBUG else '31536000'))
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False' if DEBUG else 'True') == 'True'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'False' if DEBUG else 'True') == 'True'

# Content security
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Additional security headers
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# Encryption key for sensitive data
ENCRYPTION_KEY = os.environ.get('ENCRYPTION_KEY', 'dev-32-byte-encryption-key-here').encode()

AUTH_USER_MODEL = 'accounts.CustomUser'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'widget_tweaks',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_celery_beat',

    # HMS Apps
    'accounts',
    'core',
    'patients',
    'doctors',
    'appointments',
    'pharmacy.apps.PharmacyConfig',
    'laboratory',
    'billing',
    'inpatient',
    'hr',
    'reporting',
    'dashboard',
    'consultations',
    'radiology',
    'theatre.apps.TheatreConfig',
    'nhia',
    'retainership',
    'desk_office',
    'dental',
    'ophthalmic',
    'ent',
    'oncology',
    'scbu',
    'anc',
    'labor',
    'icu',
    'family_planning',
    'gynae_emergency',
    'pharmacy_billing.apps.PharmacyBillingConfig',  # Added to resolve RuntimeError

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'core.middleware.SessionTimeoutMiddleware',  # Session timeout management
    'core.middleware.PatientSessionMiddleware',  # Patient-specific session security
    'user_isolation_middleware.UserIsolationMiddleware',  # User isolation middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.LoginRequiredMiddleware',  # Re-enabled after debugging
    'core.middleware.RoleBasedAccessMiddleware',  # Role-based access control
]

ROOT_URLCONF = 'hms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'pharmacy.context_processors.pharmacy_context',
                'patients.context_processors.all_patients',
            ],
        },
    },
]

WSGI_APPLICATION = 'hms.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database Configuration
DB_ENGINE = os.environ.get('DB_ENGINE', 'django.db.backends.sqlite3')

if DB_ENGINE == 'django.db.backends.sqlite3':
    # SQLite Configuration (Development)
    DATABASES = {
        'default': {
            'ENGINE': DB_ENGINE,
            'NAME': BASE_DIR / os.environ.get('DB_NAME', 'db.sqlite3'),
            'OPTIONS': {
                'timeout': 20,
            }
        }
    }
else:
    # MySQL/PostgreSQL Configuration (Production)
    DATABASES = {
        'default': {
            'ENGINE': DB_ENGINE,
            'NAME': os.environ.get('DB_NAME', 'hms_db'),
            'USER': os.environ.get('DB_USER', 'hms_user'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '3306' if 'mysql' in DB_ENGINE else '5432'),
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'" if 'mysql' in DB_ENGINE else {},
                'charset': 'utf8mb4' if 'mysql' in DB_ENGINE else 'utf8',
            },
            'CONN_MAX_AGE': 60,  # Connection pooling
            'CONN_HEALTH_CHECKS': True,
        }
    }

    # Validate required database settings for production
    if not DEBUG and not os.environ.get('DB_PASSWORD'):
        raise ValueError("DB_PASSWORD environment variable must be set for production database")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Email Configuration
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False') == 'True'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER or 'noreply@hospital.com')
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', DEFAULT_FROM_EMAIL)

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# AUTHENTICATION_BACKENDS = [
#     'accounts.backends.AdminBackend',  # Admin authentication (username-based)
#     'accounts.backends.PhoneNumberBackend',  # Application authentication (phone-based)
#     'django.contrib.auth.backends.ModelBackend',  # Fallback
# ]

# Authentication Backends Configuration
# Order matters: Django tries each backend in sequence until one succeeds
AUTHENTICATION_BACKENDS = [
    'accounts.backends.AdminBackend',           # First: Handle admin/username logins
    'accounts.backends.PhoneNumberBackend',     # Second: Handle phone number logins  
    'accounts.backends.FallbackModelBackend',   # Third: Fallback for edge cases
]

# Login URLs - these remain the same for your application
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = 'dashboard:dashboard'  # Where users go after app login
LOGOUT_REDIRECT_URL = 'accounts:login'

# Admin site configuration (optional - for customization)
ADMIN_SITE_HEADER = 'HMS Administration'
ADMIN_SITE_TITLE = 'HMS Admin'
ADMIN_INDEX_TITLE = 'Welcome to HMS Administration'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Login URLs
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'accounts:login'

# Crispy Forms settings (temporarily disabled)
# Use default crispy forms template pack
# CRISPY_TEMPLATE_PACK = "bootstrap4"


# REST framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'DEBUG' if DEBUG else 'INFO')
LOG_FILE = os.environ.get('LOG_FILE', None)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '{levelname} {asctime} {name} {module} {funcName} {lineno} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'pharmacy': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'hms': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
}

# Add file logging if LOG_FILE is specified
if LOG_FILE:
    LOGGING['handlers']['file'] = {
        'level': LOG_LEVEL,
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': LOG_FILE,
        'maxBytes': 1024*1024*10,  # 10MB
        'backupCount': 5,
        'formatter': 'detailed'
    }
    # Add file handler to all loggers
    for logger_config in LOGGING['loggers'].values():
        logger_config['handlers'].append('file')
    LOGGING['root']['handlers'].append('file')


# Hospital Information
HOSPITAL_NAME = os.environ.get('HOSPITAL_NAME', 'City General Hospital')
HOSPITAL_ADDRESS = os.environ.get('HOSPITAL_ADDRESS', '123 Medical Center Blvd, City, State 12345')
HOSPITAL_PHONE = os.environ.get('HOSPITAL_PHONE', '(555) 123-4567')
HOSPITAL_EMAIL = os.environ.get('HOSPITAL_EMAIL', 'info@citygeneralhospital.com')

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': os.environ.get('CACHE_BACKEND', 'django.core.cache.backends.locmem.LocMemCache'),
        'LOCATION': os.environ.get('CACHE_LOCATION', 'unique-snowflake'),
        'TIMEOUT': int(os.environ.get('CACHE_TIMEOUT', '300')),  # 5 minutes default
        'OPTIONS': {
            'MAX_ENTRIES': int(os.environ.get('CACHE_MAX_ENTRIES', '1000')),
        }
    }
}

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = int(os.environ.get('SESSION_COOKIE_AGE', '1200'))  # 20 minutes default
SESSION_COOKIE_NAME = 'hms_sessionid'
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expires when browser closes
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie

# Patient-specific session settings
PATIENT_SESSION_TIMEOUT = int(os.environ.get('PATIENT_SESSION_TIMEOUT', '1200'))  # 20 minutes for patient portal
STAFF_SESSION_TIMEOUT = int(os.environ.get('STAFF_SESSION_TIMEOUT', '1200'))  # 20 minutes for staff

# Session security
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_PATH = '/'

# Custom session variables
SESSION_TIMEOUT_WARNING = int(os.environ.get('SESSION_TIMEOUT_WARNING', '300'))  # 5 minutes warning before timeout

# Crispy Forms Configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Celery Configuration
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = USE_TZ

# Celery Beat (Scheduler) Configuration
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Custom settings for wallet and session management
WALLET_LOW_BALANCE_THRESHOLD = Decimal(os.environ.get('WALLET_LOW_BALANCE_THRESHOLD', '100.00'))
SESSION_MAX_AGE_DAYS = int(os.environ.get('SESSION_MAX_AGE_DAYS', '30'))
SESSION_SECURITY_LONG_THRESHOLD = int(os.environ.get('SESSION_SECURITY_LONG_THRESHOLD', '7200'))
