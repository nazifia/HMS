{
  "accounts": {
    "models": [
      {
        "name": "Role.__str__",
        "type": "method",
        "class": "Role",
        "file": "accounts\\models.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Role.get_all_permissions",
        "type": "method",
        "class": "Role",
        "file": "accounts\\models.py",
        "line": 30,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get all permissions including those from parent roles"
      },
      {
        "name": "CustomUserManager.create_user",
        "type": "method",
        "class": "CustomUserManager",
        "file": "accounts\\models.py",
        "line": 45,
        "args": [
          "self",
          "phone_number",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CustomUserManager.create_superuser",
        "type": "method",
        "class": "CustomUserManager",
        "file": "accounts\\models.py",
        "line": 66,
        "args": [
          "self",
          "phone_number",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CustomUser.get_full_name",
        "type": "method",
        "class": "CustomUser",
        "file": "accounts\\models.py",
        "line": 122,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Return the first_name plus the last_name, with a space in between.\nFalls back to username if full name is not available."
      },
      {
        "name": "CustomUser.get_short_name",
        "type": "method",
        "class": "CustomUser",
        "file": "accounts\\models.py",
        "line": 139,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Return the short name for the user (first name or username)."
      },
      {
        "name": "CustomUser.__str__",
        "type": "method",
        "class": "CustomUser",
        "file": "accounts\\models.py",
        "line": 147,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CustomUser.get_profile",
        "type": "method",
        "class": "CustomUser",
        "file": "accounts\\models.py",
        "line": 159,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CustomUserProfile.__str__",
        "type": "method",
        "class": "CustomUserProfile",
        "file": "accounts\\models.py",
        "line": 203,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CustomUserProfile.get_role",
        "type": "method",
        "class": "CustomUserProfile",
        "file": "accounts\\models.py",
        "line": 207,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Get the first role name from the user's roles"
      },
      {
        "name": "create_or_update_user_profile",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 215,
        "args": [
          "sender",
          "instance",
          "created"
        ],
        "decorators": [
          "receiver"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AuditLog.__str__",
        "type": "method",
        "class": "AuditLog",
        "file": "accounts\\models.py",
        "line": 258,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedField.__init__",
        "type": "method",
        "class": "EncryptedField",
        "file": "accounts\\models.py",
        "line": 266,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedField.get_internal_type",
        "type": "method",
        "class": "EncryptedField",
        "file": "accounts\\models.py",
        "line": 270,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedField.from_db_value",
        "type": "method",
        "class": "EncryptedField",
        "file": "accounts\\models.py",
        "line": 273,
        "args": [
          "self",
          "value",
          "expression",
          "connection"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedField.to_python",
        "type": "method",
        "class": "EncryptedField",
        "file": "accounts\\models.py",
        "line": 278,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedField.get_prep_value",
        "type": "method",
        "class": "EncryptedField",
        "file": "accounts\\models.py",
        "line": 285,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedField.encrypt",
        "type": "method",
        "class": "EncryptedField",
        "file": "accounts\\models.py",
        "line": 290,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedField.decrypt",
        "type": "method",
        "class": "EncryptedField",
        "file": "accounts\\models.py",
        "line": 298,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedTextField.get_internal_type",
        "type": "method",
        "class": "EncryptedTextField",
        "file": "accounts\\models.py",
        "line": 317,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EncryptedTextField.__init__",
        "type": "method",
        "class": "EncryptedTextField",
        "file": "accounts\\models.py",
        "line": 320,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Department.__str__",
        "type": "method",
        "class": "Department",
        "file": "accounts\\models.py",
        "line": 337,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_all_permissions",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 30,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get all permissions including those from parent roles"
      },
      {
        "name": "create_user",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 45,
        "args": [
          "self",
          "phone_number",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "create_superuser",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 66,
        "args": [
          "self",
          "phone_number",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_full_name",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 122,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Return the first_name plus the last_name, with a space in between.\nFalls back to username if full name is not available."
      },
      {
        "name": "get_short_name",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 139,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Return the short name for the user (first name or username)."
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 147,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_profile",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 159,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 203,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_role",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 207,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Get the first role name from the user's roles"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 258,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 266,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_internal_type",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 270,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "from_db_value",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 273,
        "args": [
          "self",
          "value",
          "expression",
          "connection"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "to_python",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 278,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_prep_value",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 285,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "encrypt",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 290,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "decrypt",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 298,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_internal_type",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 317,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 320,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "accounts\\models.py",
        "line": 337,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "is_admin",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 28,
        "args": [
          "user"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "custom_login_view",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 65,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Custom login view for application users (using phone numbers).\nAdmin users should use /admin/ directly."
      },
      {
        "name": "dashboard_view",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 107,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "profile",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 113,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for user profile. Allows viewing own or others' profiles if authorized."
      },
      {
        "name": "edit_profile",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 161,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "staff_list",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 216,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for listing all staff members (admin only)"
      },
      {
        "name": "send_staff_onboarding_task_to_mcp",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 224,
        "args": [
          "user"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Simulate sending a staff onboarding task to context7 MCP/Taskmaster.\nReplace with real MCP/Taskmaster API integration as needed."
      },
      {
        "name": "add_staff",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 250,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for adding new staff member (admin only)"
      },
      {
        "name": "edit_staff",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 270,
        "args": [
          "request",
          "staff_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for editing staff member (admin only)"
      },
      {
        "name": "delete_staff",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 293,
        "args": [
          "request",
          "staff_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for deleting staff member (admin only)"
      },
      {
        "name": "department_list",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 314,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for listing all departments (admin only)"
      },
      {
        "name": "add_department",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 324,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for adding new department (admin only)"
      },
      {
        "name": "edit_department",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 343,
        "args": [
          "request",
          "department_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for editing department (admin only)"
      },
      {
        "name": "delete_department",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 365,
        "args": [
          "request",
          "department_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for deleting department (admin only)"
      },
      {
        "name": "api_users",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 380,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "API view for getting user information"
      },
      {
        "name": "register",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 406,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "User registration view using phone number as authentication."
      },
      {
        "name": "create_role",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 434,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "edit_role",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 451,
        "args": [
          "request",
          "role_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "role_demo",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 468,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "audit_logs",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 473,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "permission_management",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 504,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "bulk_user_actions",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 521,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "user_privileges",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 541,
        "args": [
          "request",
          "user_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "delete_role",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 560,
        "args": [
          "request",
          "role_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "role_management",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 575,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "user_dashboard",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 594,
        "args": [
          "request"
        ],
        "decorators": [
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "Admin user management dashboard: filter, search, bulk actions, CSV export."
      },
      {
        "name": "is_admin_or_staff",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 807,
        "args": [
          "user"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "user_dashboard",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 814,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "role_management",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 945,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for managing roles and permissions"
      },
      {
        "name": "create_role",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 959,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for creating a new role"
      },
      {
        "name": "edit_role",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 993,
        "args": [
          "request",
          "role_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for editing an existing role"
      },
      {
        "name": "delete_role",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 1033,
        "args": [
          "request",
          "role_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for deleting a role"
      },
      {
        "name": "user_privileges",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 1072,
        "args": [
          "request",
          "user_id"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for managing user privileges (role assignments)"
      },
      {
        "name": "bulk_user_actions",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 1112,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for performing bulk actions on users"
      },
      {
        "name": "permission_management",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 1171,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for managing permissions"
      },
      {
        "name": "audit_logs",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 1213,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "View for displaying audit logs"
      },
      {
        "name": "role_demo",
        "type": "function",
        "file": "accounts\\views.py",
        "line": 1256,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "user_passes_test"
        ],
        "is_async": false,
        "docstring": "Demo view showing the role system in action"
      },
      {
        "name": "UserViewSet.get_queryset",
        "type": "method",
        "class": "UserViewSet",
        "file": "accounts\\api\\views.py",
        "line": 24,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserViewSet.create",
        "type": "method",
        "class": "UserViewSet",
        "file": "accounts\\api\\views.py",
        "line": 31,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserViewSet.update",
        "type": "method",
        "class": "UserViewSet",
        "file": "accounts\\api\\views.py",
        "line": 51,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserViewSet.deactivate",
        "type": "method",
        "class": "UserViewSet",
        "file": "accounts\\api\\views.py",
        "line": 76,
        "args": [
          "self",
          "request",
          "pk"
        ],
        "decorators": [
          "action"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserViewSet.assign_roles",
        "type": "method",
        "class": "UserViewSet",
        "file": "accounts\\api\\views.py",
        "line": 92,
        "args": [
          "self",
          "request",
          "pk"
        ],
        "decorators": [
          "action"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserViewSet._capture_changes",
        "type": "method",
        "class": "UserViewSet",
        "file": "accounts\\api\\views.py",
        "line": 115,
        "args": [
          "self",
          "instance",
          "validated_data"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserViewSet.get_client_ip",
        "type": "method",
        "class": "UserViewSet",
        "file": "accounts\\api\\views.py",
        "line": 126,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AuditLogViewSet.get_queryset",
        "type": "method",
        "class": "AuditLogViewSet",
        "file": "accounts\\api\\views.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LoginView.post",
        "type": "method",
        "class": "LoginView",
        "file": "accounts\\api\\views.py",
        "line": 176,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 24,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "create",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 31,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "update",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 51,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "deactivate",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 76,
        "args": [
          "self",
          "request",
          "pk"
        ],
        "decorators": [
          "action"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "assign_roles",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 92,
        "args": [
          "self",
          "request",
          "pk"
        ],
        "decorators": [
          "action"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "_capture_changes",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 115,
        "args": [
          "self",
          "instance",
          "validated_data"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_client_ip",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 126,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "post",
        "type": "function",
        "file": "accounts\\api\\views.py",
        "line": 176,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "forms": [
      {
        "name": "CustomLoginForm.clean",
        "type": "method",
        "class": "CustomLoginForm",
        "file": "accounts\\forms.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CustomUserCreationForm.save",
        "type": "method",
        "class": "CustomUserCreationForm",
        "file": "accounts\\forms.py",
        "line": 57,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserRegistrationForm.save",
        "type": "method",
        "class": "UserRegistrationForm",
        "file": "accounts\\forms.py",
        "line": 120,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserProfileForm.__init__",
        "type": "method",
        "class": "UserProfileForm",
        "file": "accounts\\forms.py",
        "line": 244,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserProfileForm.clean_username",
        "type": "method",
        "class": "UserProfileForm",
        "file": "accounts\\forms.py",
        "line": 312,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserProfileForm.clean_email",
        "type": "method",
        "class": "UserProfileForm",
        "file": "accounts\\forms.py",
        "line": 338,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserProfileForm.clean_contact_phone_number",
        "type": "method",
        "class": "UserProfileForm",
        "file": "accounts\\forms.py",
        "line": 346,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserProfileForm.save",
        "type": "method",
        "class": "UserProfileForm",
        "file": "accounts\\forms.py",
        "line": 363,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserProfileForm.clean_username",
        "type": "method",
        "class": "UserProfileForm",
        "file": "accounts\\forms.py",
        "line": 457,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Validate username uniqueness if it's being changed."
      },
      {
        "name": "UserProfileForm.clean_profile_phone_number",
        "type": "method",
        "class": "UserProfileForm",
        "file": "accounts\\forms.py",
        "line": 471,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserProfileForm.save",
        "type": "method",
        "class": "UserProfileForm",
        "file": "accounts\\forms.py",
        "line": 485,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "StaffCreationForm.clean_roles",
        "type": "method",
        "class": "StaffCreationForm",
        "file": "accounts\\forms.py",
        "line": 543,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "StaffCreationForm.clean_phone_number",
        "type": "method",
        "class": "StaffCreationForm",
        "file": "accounts\\forms.py",
        "line": 549,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "StaffCreationForm.save",
        "type": "method",
        "class": "StaffCreationForm",
        "file": "accounts\\forms.py",
        "line": 555,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PhoneNumberPasswordResetForm.clean_email",
        "type": "method",
        "class": "PhoneNumberPasswordResetForm",
        "file": "accounts\\forms.py",
        "line": 597,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PhoneNumberPasswordResetForm.get_users",
        "type": "method",
        "class": "PhoneNumberPasswordResetForm",
        "file": "accounts\\forms.py",
        "line": 616,
        "args": [
          "self",
          "email_field_value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PhoneNumberPasswordResetForm.save",
        "type": "method",
        "class": "PhoneNumberPasswordResetForm",
        "file": "accounts\\forms.py",
        "line": 624,
        "args": [
          "self",
          "domain_override",
          "subject_template_name",
          "email_template_name",
          "use_https",
          "token_generator",
          "from_email",
          "request",
          "html_email_template_name",
          "extra_email_context"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RoleForm.__init__",
        "type": "method",
        "class": "RoleForm",
        "file": "accounts\\forms.py",
        "line": 674,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RoleForm.clean_parent",
        "type": "method",
        "class": "RoleForm",
        "file": "accounts\\forms.py",
        "line": 687,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RoleForm.clean_name",
        "type": "method",
        "class": "RoleForm",
        "file": "accounts\\forms.py",
        "line": 693,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserRoleAssignmentForm.__init__",
        "type": "method",
        "class": "UserRoleAssignmentForm",
        "file": "accounts\\forms.py",
        "line": 718,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "BulkUserActionForm.clean",
        "type": "method",
        "class": "BulkUserActionForm",
        "file": "accounts\\forms.py",
        "line": 749,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PermissionFilterForm.__init__",
        "type": "method",
        "class": "PermissionFilterForm",
        "file": "accounts\\forms.py",
        "line": 776,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 57,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 120,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 244,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_username",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 312,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_email",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 338,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_contact_phone_number",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 346,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 363,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_username",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 457,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Validate username uniqueness if it's being changed."
      },
      {
        "name": "clean_profile_phone_number",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 471,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 485,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_roles",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 543,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_phone_number",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 549,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 555,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_email",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 597,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_users",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 616,
        "args": [
          "self",
          "email_field_value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 624,
        "args": [
          "self",
          "domain_override",
          "subject_template_name",
          "email_template_name",
          "use_https",
          "token_generator",
          "from_email",
          "request",
          "html_email_template_name",
          "extra_email_context"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 674,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_parent",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 687,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_name",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 693,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 718,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 749,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "accounts\\forms.py",
        "line": 776,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "accounts\\admin.py",
        "line": 18,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "accounts\\admin.py",
        "line": 24,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdminAuthenticationForm.__init__",
        "type": "method",
        "class": "AdminAuthenticationForm",
        "file": "accounts\\admin.py",
        "line": 65,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CustomUserAdmin.get_queryset",
        "type": "method",
        "class": "CustomUserAdmin",
        "file": "accounts\\admin.py",
        "line": 99,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Only show staff users in admin interface"
      },
      {
        "name": "RoleAdmin.get_model_perms",
        "type": "method",
        "class": "RoleAdmin",
        "file": "accounts\\admin.py",
        "line": 118,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Only superusers can manage application roles to maintain separation"
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "accounts\\admin.py",
        "line": 18,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "accounts\\admin.py",
        "line": 24,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "accounts\\admin.py",
        "line": 65,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "accounts\\admin.py",
        "line": 99,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Only show staff users in admin interface"
      },
      {
        "name": "get_model_perms",
        "type": "function",
        "file": "accounts\\admin.py",
        "line": 118,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Only superusers can manage application roles to maintain separation"
      }
    ],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\create_admin_user.py",
        "line": 120,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\create_admin_user.py",
        "line": 126,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "accounts\\management\\commands\\create_admin_user.py",
        "line": 120,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "accounts\\management\\commands\\create_admin_user.py",
        "line": 126,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\create_demo_nurses.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\create_demo_nurses.py",
        "line": 18,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "accounts\\management\\commands\\create_demo_nurses.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "accounts\\management\\commands\\create_demo_nurses.py",
        "line": 18,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\create_nursing_department.py",
        "line": 8,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\create_nursing_department.py",
        "line": 15,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "accounts\\management\\commands\\create_nursing_department.py",
        "line": 8,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "accounts\\management\\commands\\create_nursing_department.py",
        "line": 15,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\demo_users.py",
        "line": 12,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\demo_users.py",
        "line": 19,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.assign_existing_users",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\demo_users.py",
        "line": 133,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Assign roles to existing users"
      },
      {
        "name": "Command.display_summary",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\demo_users.py",
        "line": 155,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Display a summary of users and their roles"
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "accounts\\management\\commands\\demo_users.py",
        "line": 12,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "accounts\\management\\commands\\demo_users.py",
        "line": 19,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "assign_existing_users",
        "type": "function",
        "file": "accounts\\management\\commands\\demo_users.py",
        "line": 133,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Assign roles to existing users"
      },
      {
        "name": "display_summary",
        "type": "function",
        "file": "accounts\\management\\commands\\demo_users.py",
        "line": 155,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Display a summary of users and their roles"
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\fix_departments.py",
        "line": 9,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\fix_departments.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.fix_invalid_department_ids",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\fix_departments.py",
        "line": 37,
        "args": [
          "self",
          "dry_run"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Fix any invalid department_id values in the database."
      },
      {
        "name": "Command.migrate_department_data",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\fix_departments.py",
        "line": 125,
        "args": [
          "self",
          "dry_run"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Migrate string department names to proper foreign key relationships."
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "accounts\\management\\commands\\fix_departments.py",
        "line": 9,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "accounts\\management\\commands\\fix_departments.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "fix_invalid_department_ids",
        "type": "function",
        "file": "accounts\\management\\commands\\fix_departments.py",
        "line": 37,
        "args": [
          "self",
          "dry_run"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Fix any invalid department_id values in the database."
      },
      {
        "name": "migrate_department_data",
        "type": "function",
        "file": "accounts\\management\\commands\\fix_departments.py",
        "line": 125,
        "args": [
          "self",
          "dry_run"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Migrate string department names to proper foreign key relationships."
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\populate_roles.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "accounts\\management\\commands\\populate_roles.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\update_superuser_phone.py",
        "line": 8,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "accounts\\management\\commands\\update_superuser_phone.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "accounts\\management\\commands\\update_superuser_phone.py",
        "line": 8,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "accounts\\management\\commands\\update_superuser_phone.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [
      {
        "name": "PermissionSerializer.get_content_type",
        "type": "method",
        "class": "PermissionSerializer",
        "file": "accounts\\api\\serializers.py",
        "line": 15,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RoleSerializer.validate_parent",
        "type": "method",
        "class": "RoleSerializer",
        "file": "accounts\\api\\serializers.py",
        "line": 34,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserSerializer.create",
        "type": "method",
        "class": "UserSerializer",
        "file": "accounts\\api\\serializers.py",
        "line": 71,
        "args": [
          "self",
          "validated_data"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserSerializer.update",
        "type": "method",
        "class": "UserSerializer",
        "file": "accounts\\api\\serializers.py",
        "line": 89,
        "args": [
          "self",
          "instance",
          "validated_data"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AuditLogSerializer.get_details",
        "type": "method",
        "class": "AuditLogSerializer",
        "file": "accounts\\api\\serializers.py",
        "line": 123,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_content_type",
        "type": "function",
        "file": "accounts\\api\\serializers.py",
        "line": 15,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "validate_parent",
        "type": "function",
        "file": "accounts\\api\\serializers.py",
        "line": 34,
        "args": [
          "self",
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "create",
        "type": "function",
        "file": "accounts\\api\\serializers.py",
        "line": 71,
        "args": [
          "self",
          "validated_data"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "update",
        "type": "function",
        "file": "accounts\\api\\serializers.py",
        "line": 89,
        "args": [
          "self",
          "instance",
          "validated_data"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_details",
        "type": "function",
        "file": "accounts\\api\\serializers.py",
        "line": 123,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "tests": [
      {
        "name": "AdminSeparationTestCase.setUp",
        "type": "method",
        "class": "AdminSeparationTestCase",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdminSeparationTestCase.test_django_admin_access",
        "type": "method",
        "class": "AdminSeparationTestCase",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 54,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that only staff users can access Django admin."
      },
      {
        "name": "AdminSeparationTestCase.test_application_role_independence",
        "type": "method",
        "class": "AdminSeparationTestCase",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 74,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that Django admin status doesn't grant application roles."
      },
      {
        "name": "AdminSeparationTestCase.test_authentication_backend_separation",
        "type": "method",
        "class": "AdminSeparationTestCase",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 85,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that different backends handle different authentication."
      },
      {
        "name": "AdminSeparationTestCase.test_middleware_admin_exclusion",
        "type": "method",
        "class": "AdminSeparationTestCase",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 132,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that admin URLs are excluded from role-based middleware."
      },
      {
        "name": "AdminUserCreationTestCase.test_create_admin_user_command",
        "type": "method",
        "class": "AdminUserCreationTestCase",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that the management command creates proper admin users."
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_django_admin_access",
        "type": "function",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 54,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that only staff users can access Django admin."
      },
      {
        "name": "test_application_role_independence",
        "type": "function",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 74,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that Django admin status doesn't grant application roles."
      },
      {
        "name": "test_authentication_backend_separation",
        "type": "function",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 85,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that different backends handle different authentication."
      },
      {
        "name": "test_middleware_admin_exclusion",
        "type": "function",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 132,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that admin URLs are excluded from role-based middleware."
      },
      {
        "name": "test_create_admin_user_command",
        "type": "function",
        "file": "accounts\\tests\\test_admin_separation.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that the management command creates proper admin users."
      },
      {
        "name": "UserManagementTests.setUp",
        "type": "method",
        "class": "UserManagementTests",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserManagementTests.test_user_creation",
        "type": "method",
        "class": "UserManagementTests",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 42,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserManagementTests.test_user_update",
        "type": "method",
        "class": "UserManagementTests",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 63,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserManagementTests.test_user_deactivation",
        "type": "method",
        "class": "UserManagementTests",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 84,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserManagementTests.test_role_assignment",
        "type": "method",
        "class": "UserManagementTests",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserManagementTests.test_encrypted_fields",
        "type": "method",
        "class": "UserManagementTests",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 111,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserManagementTests.test_rbac_permissions",
        "type": "method",
        "class": "UserManagementTests",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "UserManagementTests.test_audit_log_retrieval",
        "type": "method",
        "class": "UserManagementTests",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 149,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_user_creation",
        "type": "function",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 42,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_user_update",
        "type": "function",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 63,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_user_deactivation",
        "type": "function",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 84,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_role_assignment",
        "type": "function",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_encrypted_fields",
        "type": "function",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 111,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_rbac_permissions",
        "type": "function",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_audit_log_retrieval",
        "type": "function",
        "file": "accounts\\tests\\test_user_management.py",
        "line": 149,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "other": [
      {
        "name": "HMSAdminSite.has_permission",
        "type": "method",
        "class": "HMSAdminSite",
        "file": "accounts\\admin_site.py",
        "line": 23,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Only allow staff users to access admin.\nThis is independent of application roles."
      },
      {
        "name": "HMSAdminSite.login",
        "type": "method",
        "class": "HMSAdminSite",
        "file": "accounts\\admin_site.py",
        "line": 30,
        "args": [
          "self",
          "request",
          "extra_context"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Custom login that only allows staff users."
      },
      {
        "name": "IndependentAdminMixin.get_queryset",
        "type": "method",
        "class": "IndependentAdminMixin",
        "file": "accounts\\admin_site.py",
        "line": 57,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Override to ensure admin queries are independent of application filters."
      },
      {
        "name": "IndependentAdminMixin.has_view_permission",
        "type": "method",
        "class": "IndependentAdminMixin",
        "file": "accounts\\admin_site.py",
        "line": 63,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "View permission based only on Django admin permissions."
      },
      {
        "name": "IndependentAdminMixin.has_add_permission",
        "type": "method",
        "class": "IndependentAdminMixin",
        "file": "accounts\\admin_site.py",
        "line": 69,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Add permission based only on Django admin permissions."
      },
      {
        "name": "IndependentAdminMixin.has_change_permission",
        "type": "method",
        "class": "IndependentAdminMixin",
        "file": "accounts\\admin_site.py",
        "line": 75,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Change permission based only on Django admin permissions."
      },
      {
        "name": "IndependentAdminMixin.has_delete_permission",
        "type": "method",
        "class": "IndependentAdminMixin",
        "file": "accounts\\admin_site.py",
        "line": 81,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Delete permission based only on Django admin permissions."
      },
      {
        "name": "AdminOnlyModelAdmin.get_model_perms",
        "type": "method",
        "class": "AdminOnlyModelAdmin",
        "file": "accounts\\admin_site.py",
        "line": 93,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Only superusers can manage certain sensitive models."
      },
      {
        "name": "is_admin_request",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 103,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if the request is for Django admin interface."
      },
      {
        "name": "admin_required",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 110,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to ensure only Django admin users can access a view.\nThis is independent of application roles."
      },
      {
        "name": "has_permission",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 23,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Only allow staff users to access admin.\nThis is independent of application roles."
      },
      {
        "name": "login",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 30,
        "args": [
          "self",
          "request",
          "extra_context"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Custom login that only allows staff users."
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 57,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Override to ensure admin queries are independent of application filters."
      },
      {
        "name": "has_view_permission",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 63,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "View permission based only on Django admin permissions."
      },
      {
        "name": "has_add_permission",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 69,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Add permission based only on Django admin permissions."
      },
      {
        "name": "has_change_permission",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 75,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Change permission based only on Django admin permissions."
      },
      {
        "name": "has_delete_permission",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 81,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Delete permission based only on Django admin permissions."
      },
      {
        "name": "get_model_perms",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 93,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Only superusers can manage certain sensitive models."
      },
      {
        "name": "wrapper",
        "type": "function",
        "file": "accounts\\admin_site.py",
        "line": 115,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PhoneNumberBackend.authenticate",
        "type": "method",
        "class": "PhoneNumberBackend",
        "file": "accounts\\backends.py",
        "line": 119,
        "args": [
          "self",
          "request",
          "username",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PhoneNumberBackend.get_user",
        "type": "method",
        "class": "PhoneNumberBackend",
        "file": "accounts\\backends.py",
        "line": 148,
        "args": [
          "self",
          "user_id"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdminBackend.authenticate",
        "type": "method",
        "class": "AdminBackend",
        "file": "accounts\\backends.py",
        "line": 160,
        "args": [
          "self",
          "request",
          "username",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdminBackend.has_perm",
        "type": "method",
        "class": "AdminBackend",
        "file": "accounts\\backends.py",
        "line": 191,
        "args": [
          "self",
          "user_obj",
          "perm",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Admin permissions are handled by Django's default permission system\nand are independent of application roles"
      },
      {
        "name": "AdminBackend.has_module_perms",
        "type": "method",
        "class": "AdminBackend",
        "file": "accounts\\backends.py",
        "line": 202,
        "args": [
          "self",
          "user_obj",
          "app_label"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if user has permissions to view the admin for a given app"
      },
      {
        "name": "FallbackModelBackend.authenticate",
        "type": "method",
        "class": "FallbackModelBackend",
        "file": "accounts\\backends.py",
        "line": 215,
        "args": [
          "self",
          "request",
          "username",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "authenticate",
        "type": "function",
        "file": "accounts\\backends.py",
        "line": 119,
        "args": [
          "self",
          "request",
          "username",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_user",
        "type": "function",
        "file": "accounts\\backends.py",
        "line": 148,
        "args": [
          "self",
          "user_id"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "authenticate",
        "type": "function",
        "file": "accounts\\backends.py",
        "line": 160,
        "args": [
          "self",
          "request",
          "username",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "has_perm",
        "type": "function",
        "file": "accounts\\backends.py",
        "line": 191,
        "args": [
          "self",
          "user_obj",
          "perm",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Admin permissions are handled by Django's default permission system\nand are independent of application roles"
      },
      {
        "name": "has_module_perms",
        "type": "function",
        "file": "accounts\\backends.py",
        "line": 202,
        "args": [
          "self",
          "user_obj",
          "app_label"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if user has permissions to view the admin for a given app"
      },
      {
        "name": "authenticate",
        "type": "function",
        "file": "accounts\\backends.py",
        "line": 215,
        "args": [
          "self",
          "request",
          "username",
          "password"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "admitted_count",
        "type": "function",
        "file": "accounts\\templatetags\\admission_tags.py",
        "line": 6,
        "args": [
          "admissions"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "discharged_count",
        "type": "function",
        "file": "accounts\\templatetags\\admission_tags.py",
        "line": 10,
        "args": [
          "admissions"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "render_json_details",
        "type": "function",
        "file": "accounts\\templatetags\\audit_log_extras.py",
        "line": 9,
        "args": [
          "details"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "_render_dict",
        "type": "function",
        "file": "accounts\\templatetags\\audit_log_extras.py",
        "line": 22,
        "args": [
          "data",
          "level"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "_render_value",
        "type": "function",
        "file": "accounts\\templatetags\\audit_log_extras.py",
        "line": 41,
        "args": [
          "value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_class",
        "type": "function",
        "file": "accounts\\templatetags\\form_tags.py",
        "line": 6,
        "args": [
          "field",
          "css_class"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Adds a CSS class to a form field widget for Bootstrap styling.\nUsage: {{ field|add_class:'form-control' }}"
      },
      {
        "name": "lookup",
        "type": "function",
        "file": "accounts\\templatetags\\role_tags.py",
        "line": 6,
        "args": [
          "dictionary",
          "key"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Template filter to lookup a value in a dictionary"
      }
    ]
  },
  "patients": {
    "models": [
      {
        "name": "Patient.save",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 79,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Patient.__str__",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Patient.get_full_name",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Patient.get_age",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 103,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Patient.age",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 109,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Property to easily access patient's age"
      },
      {
        "name": "Patient.get_profile_image",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 113,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get the best available profile image for the patient.\nPrioritizes 'photo' field over 'profile_picture' field.\nReturns the image field object or None if no image is available."
      },
      {
        "name": "Patient.get_profile_image_url",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 125,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get the URL of the best available profile image.\nReturns the image URL or None if no image is available."
      },
      {
        "name": "Patient.has_profile_image",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 133,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if the patient has any profile image available.\nReturns True if either photo or profile_picture is available."
      },
      {
        "name": "Patient.get_patient_type_display",
        "type": "method",
        "class": "Patient",
        "file": "patients\\models.py",
        "line": 140,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MedicalHistory.__str__",
        "type": "method",
        "class": "MedicalHistory",
        "file": "patients\\models.py",
        "line": 153,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Vitals.__str__",
        "type": "method",
        "class": "Vitals",
        "file": "patients\\models.py",
        "line": 175,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Vitals.calculate_bmi",
        "type": "method",
        "class": "Vitals",
        "file": "patients\\models.py",
        "line": 178,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Vitals.save",
        "type": "method",
        "class": "Vitals",
        "file": "patients\\models.py",
        "line": 185,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PatientWallet.__str__",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 201,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PatientWallet.credit",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 204,
        "args": [
          "self",
          "amount",
          "description",
          "transaction_type",
          "user",
          "invoice",
          "payment_instance"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Credit amount to wallet and create transaction record"
      },
      {
        "name": "PatientWallet.debit",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 224,
        "args": [
          "self",
          "amount",
          "description",
          "transaction_type",
          "user",
          "invoice",
          "payment_instance"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Debit amount from wallet and create transaction record"
      },
      {
        "name": "PatientWallet.get_transaction_history",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 247,
        "args": [
          "self",
          "limit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get wallet transaction history"
      },
      {
        "name": "PatientWallet.get_total_credits",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 254,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get total amount credited to wallet"
      },
      {
        "name": "PatientWallet.get_total_debits",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 260,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get total amount debited from wallet"
      },
      {
        "name": "PatientWallet.transfer_to",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 266,
        "args": [
          "self",
          "recipient_wallet",
          "amount",
          "description",
          "user"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Transfer funds to another wallet atomically"
      },
      {
        "name": "PatientWallet.get_transfer_history",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 316,
        "args": [
          "self",
          "limit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get transfer-specific transaction history"
      },
      {
        "name": "PatientWallet.get_total_transfers_in",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 326,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get total amount received via transfers"
      },
      {
        "name": "PatientWallet.get_total_transfers_out",
        "type": "method",
        "class": "PatientWallet",
        "file": "patients\\models.py",
        "line": 332,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get total amount sent via transfers"
      },
      {
        "name": "WalletTransaction.save",
        "type": "method",
        "class": "WalletTransaction",
        "file": "patients\\models.py",
        "line": 384,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletTransaction._generate_reference_number",
        "type": "method",
        "class": "WalletTransaction",
        "file": "patients\\models.py",
        "line": 389,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Generate unique reference number for transaction"
      },
      {
        "name": "WalletTransaction.__str__",
        "type": "method",
        "class": "WalletTransaction",
        "file": "patients\\models.py",
        "line": 397,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NHIAPatientManager.get_queryset",
        "type": "method",
        "class": "NHIAPatientManager",
        "file": "patients\\models.py",
        "line": 407,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NHIAPatient.save",
        "type": "method",
        "class": "NHIAPatient",
        "file": "patients\\models.py",
        "line": 418,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "patients\\models.py",
        "line": 79,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "patients\\models.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_full_name",
        "type": "function",
        "file": "patients\\models.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_age",
        "type": "function",
        "file": "patients\\models.py",
        "line": 103,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "age",
        "type": "function",
        "file": "patients\\models.py",
        "line": 109,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Property to easily access patient's age"
      },
      {
        "name": "get_profile_image",
        "type": "function",
        "file": "patients\\models.py",
        "line": 113,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get the best available profile image for the patient.\nPrioritizes 'photo' field over 'profile_picture' field.\nReturns the image field object or None if no image is available."
      },
      {
        "name": "get_profile_image_url",
        "type": "function",
        "file": "patients\\models.py",
        "line": 125,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get the URL of the best available profile image.\nReturns the image URL or None if no image is available."
      },
      {
        "name": "has_profile_image",
        "type": "function",
        "file": "patients\\models.py",
        "line": 133,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if the patient has any profile image available.\nReturns True if either photo or profile_picture is available."
      },
      {
        "name": "get_patient_type_display",
        "type": "function",
        "file": "patients\\models.py",
        "line": 140,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "patients\\models.py",
        "line": 153,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "patients\\models.py",
        "line": 175,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "calculate_bmi",
        "type": "function",
        "file": "patients\\models.py",
        "line": 178,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "patients\\models.py",
        "line": 185,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "patients\\models.py",
        "line": 201,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "credit",
        "type": "function",
        "file": "patients\\models.py",
        "line": 204,
        "args": [
          "self",
          "amount",
          "description",
          "transaction_type",
          "user",
          "invoice",
          "payment_instance"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Credit amount to wallet and create transaction record"
      },
      {
        "name": "debit",
        "type": "function",
        "file": "patients\\models.py",
        "line": 224,
        "args": [
          "self",
          "amount",
          "description",
          "transaction_type",
          "user",
          "invoice",
          "payment_instance"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Debit amount from wallet and create transaction record"
      },
      {
        "name": "get_transaction_history",
        "type": "function",
        "file": "patients\\models.py",
        "line": 247,
        "args": [
          "self",
          "limit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get wallet transaction history"
      },
      {
        "name": "get_total_credits",
        "type": "function",
        "file": "patients\\models.py",
        "line": 254,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get total amount credited to wallet"
      },
      {
        "name": "get_total_debits",
        "type": "function",
        "file": "patients\\models.py",
        "line": 260,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get total amount debited from wallet"
      },
      {
        "name": "transfer_to",
        "type": "function",
        "file": "patients\\models.py",
        "line": 266,
        "args": [
          "self",
          "recipient_wallet",
          "amount",
          "description",
          "user"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Transfer funds to another wallet atomically"
      },
      {
        "name": "get_transfer_history",
        "type": "function",
        "file": "patients\\models.py",
        "line": 316,
        "args": [
          "self",
          "limit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get transfer-specific transaction history"
      },
      {
        "name": "get_total_transfers_in",
        "type": "function",
        "file": "patients\\models.py",
        "line": 326,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get total amount received via transfers"
      },
      {
        "name": "get_total_transfers_out",
        "type": "function",
        "file": "patients\\models.py",
        "line": 332,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get total amount sent via transfers"
      },
      {
        "name": "save",
        "type": "function",
        "file": "patients\\models.py",
        "line": 384,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "_generate_reference_number",
        "type": "function",
        "file": "patients\\models.py",
        "line": 389,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Generate unique reference number for transaction"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "patients\\models.py",
        "line": 397,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "patients\\models.py",
        "line": 407,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "patients\\models.py",
        "line": 418,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "patient_list",
        "type": "function",
        "file": "patients\\views.py",
        "line": 24,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all registered patients (active and inactive) with search and filter functionality"
      },
      {
        "name": "register_patient",
        "type": "function",
        "file": "patients\\views.py",
        "line": 77,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for registering a new patient"
      },
      {
        "name": "patient_detail",
        "type": "function",
        "file": "patients\\views.py",
        "line": 113,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying patient details"
      },
      {
        "name": "register_nhia_patient",
        "type": "function",
        "file": "patients\\views.py",
        "line": 177,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "edit_nhia_patient",
        "type": "function",
        "file": "patients\\views.py",
        "line": 204,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "edit_patient",
        "type": "function",
        "file": "patients\\views.py",
        "line": 226,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing patient information"
      },
      {
        "name": "toggle_patient_status",
        "type": "function",
        "file": "patients\\views.py",
        "line": 254,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required",
          "require_POST"
        ],
        "is_async": false,
        "docstring": "View for activating or deactivating a patient."
      },
      {
        "name": "add_funds_to_wallet",
        "type": "function",
        "file": "patients\\views.py",
        "line": 280,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "wallet_dashboard",
        "type": "function",
        "file": "patients\\views.py",
        "line": 313,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Comprehensive wallet dashboard for a patient"
      },
      {
        "name": "wallet_transactions",
        "type": "function",
        "file": "patients\\views.py",
        "line": 358,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View all wallet transactions with search and filter"
      },
      {
        "name": "wallet_withdrawal",
        "type": "function",
        "file": "patients\\views.py",
        "line": 417,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Withdraw funds from patient wallet"
      },
      {
        "name": "wallet_transfer",
        "type": "function",
        "file": "patients\\views.py",
        "line": 454,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Transfer funds between patient wallets with enhanced error handling"
      },
      {
        "name": "wallet_refund",
        "type": "function",
        "file": "patients\\views.py",
        "line": 555,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Process refund to patient wallet"
      },
      {
        "name": "wallet_adjustment",
        "type": "function",
        "file": "patients\\views.py",
        "line": 594,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Make manual adjustment to patient wallet"
      },
      {
        "name": "search_patients",
        "type": "function",
        "file": "patients\\views.py",
        "line": 642,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "AJAX view for searching patients"
      },
      {
        "name": "edit_medical_history",
        "type": "function",
        "file": "patients\\views.py",
        "line": 669,
        "args": [
          "request",
          "history_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a medical history record"
      },
      {
        "name": "delete_medical_history",
        "type": "function",
        "file": "patients\\views.py",
        "line": 697,
        "args": [
          "request",
          "history_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a medical history record"
      },
      {
        "name": "patient_medical_history",
        "type": "function",
        "file": "patients\\views.py",
        "line": 715,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying all medical history records for a patient"
      },
      {
        "name": "patient_vitals",
        "type": "function",
        "file": "patients\\views.py",
        "line": 728,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying all vitals records for a patient"
      },
      {
        "name": "generate_receipt",
        "type": "function",
        "file": "patients\\views.py",
        "line": 741,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for generating a receipt for a patient (e.g., after payment)"
      },
      {
        "name": "generate_medical_certificate",
        "type": "function",
        "file": "patients\\views.py",
        "line": 754,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for generating a medical certificate for a patient"
      },
      {
        "name": "generate_fit_note",
        "type": "function",
        "file": "patients\\views.py",
        "line": 766,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for generating a fit note for a patient"
      },
      {
        "name": "generate_discharge_summary",
        "type": "function",
        "file": "patients\\views.py",
        "line": 778,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for generating a discharge summary for a patient"
      },
      {
        "name": "scan_barcode_qr",
        "type": "function",
        "file": "patients\\views.py",
        "line": 790,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for barcode/QR code scanning integration (e.g., for patient wristbands, medication, etc.)"
      },
      {
        "name": "lookup_national_health_id",
        "type": "function",
        "file": "patients\\views.py",
        "line": 800,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for national health ID lookup/integration"
      },
      {
        "name": "third_party_api_integration",
        "type": "function",
        "file": "patients\\views.py",
        "line": 810,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for third-party API integration (insurance, labs, etc.)"
      },
      {
        "name": "pwa_manifest",
        "type": "function",
        "file": "patients\\views.py",
        "line": 820,
        "args": [
          "request"
        ],
        "decorators": [
          "require_GET"
        ],
        "is_async": false,
        "docstring": "Serve a real manifest.json for PWA support with advanced features."
      },
      {
        "name": "service_worker",
        "type": "function",
        "file": "patients\\views.py",
        "line": 850,
        "args": [
          "request"
        ],
        "decorators": [
          "require_GET"
        ],
        "is_async": false,
        "docstring": "Serve an advanced service worker JS file for full PWA/offline support."
      },
      {
        "name": "offline_fallback",
        "type": "function",
        "file": "patients\\views.py",
        "line": 989,
        "args": [
          "request"
        ],
        "decorators": [
          "require_GET"
        ],
        "is_async": false,
        "docstring": "Serve an offline fallback page for PWA/offline support."
      },
      {
        "name": "pwa_push_demo",
        "type": "function",
        "file": "patients\\views.py",
        "line": 995,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Demo endpoint to trigger a push notification (for development/testing only)."
      },
      {
        "name": "pwa_demo",
        "type": "function",
        "file": "patients\\views.py",
        "line": 1006,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Demo page for PWA features: push notification and offline queueing."
      },
      {
        "name": "demo_push_notification",
        "type": "function",
        "file": "patients\\views.py",
        "line": 1016,
        "args": [
          "request"
        ],
        "decorators": [
          "require_GET"
        ],
        "is_async": false,
        "docstring": "Demo endpoint to trigger a push notification (stub)."
      },
      {
        "name": "pwa_offline_queue_demo",
        "type": "function",
        "file": "patients\\views.py",
        "line": 1029,
        "args": [
          "request"
        ],
        "decorators": [
          "csrf_exempt",
          "require_POST"
        ],
        "is_async": false,
        "docstring": "Demo endpoint to receive POSTs (for offline queueing test). Returns JSON indicating success or offline queue."
      }
    ],
    "forms": [
      {
        "name": "PatientForm.clean_special_characters",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 32,
        "args": [
          "value",
          "field_type"
        ],
        "decorators": [
          "staticmethod"
        ],
        "is_async": false,
        "docstring": "Remove special characters from input fields\n\nArgs:\n    value: The input string to clean\n    field_type: Type of field ('name', 'location', 'general')\n\nReturns:\n    Cleaned string with special characters removed"
      },
      {
        "name": "PatientForm.clean_email",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 84,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PatientForm.clean_phone_number",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 90,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PatientForm.clean_first_name",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 95,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from first name"
      },
      {
        "name": "PatientForm.clean_last_name",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from last name"
      },
      {
        "name": "PatientForm.clean_emergency_contact_name",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 105,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from emergency contact name"
      },
      {
        "name": "PatientForm.clean_city",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 110,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from city name"
      },
      {
        "name": "PatientForm.clean_state",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 115,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from state name"
      },
      {
        "name": "PatientForm.clean_country",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 120,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from country name"
      },
      {
        "name": "PatientForm.clean_occupation",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 125,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from occupation"
      },
      {
        "name": "PatientForm.clean_insurance_provider",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 130,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from insurance provider name"
      },
      {
        "name": "PatientForm.save",
        "type": "method",
        "class": "PatientForm",
        "file": "patients\\forms.py",
        "line": 135,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MedicalHistoryForm.__init__",
        "type": "method",
        "class": "MedicalHistoryForm",
        "file": "patients\\forms.py",
        "line": 154,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "VitalsForm.clean",
        "type": "method",
        "class": "VitalsForm",
        "file": "patients\\forms.py",
        "line": 177,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_specialization_choices",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 202,
        "args": [],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletWithdrawalForm.__init__",
        "type": "method",
        "class": "WalletWithdrawalForm",
        "file": "patients\\forms.py",
        "line": 270,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletWithdrawalForm.clean_amount",
        "type": "method",
        "class": "WalletWithdrawalForm",
        "file": "patients\\forms.py",
        "line": 274,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletTransferForm.__init__",
        "type": "method",
        "class": "WalletTransferForm",
        "file": "patients\\forms.py",
        "line": 316,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletTransferForm.clean_amount",
        "type": "method",
        "class": "WalletTransferForm",
        "file": "patients\\forms.py",
        "line": 328,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletTransferForm.clean_recipient_patient",
        "type": "method",
        "class": "WalletTransferForm",
        "file": "patients\\forms.py",
        "line": 345,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletTransferForm.clean_description",
        "type": "method",
        "class": "WalletTransferForm",
        "file": "patients\\forms.py",
        "line": 359,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletTransferForm.clean",
        "type": "method",
        "class": "WalletTransferForm",
        "file": "patients\\forms.py",
        "line": 371,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletAdjustmentForm.__init__",
        "type": "method",
        "class": "WalletAdjustmentForm",
        "file": "patients\\forms.py",
        "line": 447,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletAdjustmentForm.clean",
        "type": "method",
        "class": "WalletAdjustmentForm",
        "file": "patients\\forms.py",
        "line": 451,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NHIARegistrationForm.__init__",
        "type": "method",
        "class": "NHIARegistrationForm",
        "file": "patients\\forms.py",
        "line": 554,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NHIARegistrationForm.clean_nhia_reg_number",
        "type": "method",
        "class": "NHIARegistrationForm",
        "file": "patients\\forms.py",
        "line": 561,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NHIAIndependentPatientForm.save",
        "type": "method",
        "class": "NHIAIndependentPatientForm",
        "file": "patients\\forms.py",
        "line": 581,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RetainershipRegistrationForm.__init__",
        "type": "method",
        "class": "RetainershipRegistrationForm",
        "file": "patients\\forms.py",
        "line": 603,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RetainershipRegistrationForm.clean_retainership_reg_number",
        "type": "method",
        "class": "RetainershipRegistrationForm",
        "file": "patients\\forms.py",
        "line": 610,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RetainershipIndependentPatientForm.save",
        "type": "method",
        "class": "RetainershipIndependentPatientForm",
        "file": "patients\\forms.py",
        "line": 630,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_special_characters",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 32,
        "args": [
          "value",
          "field_type"
        ],
        "decorators": [
          "staticmethod"
        ],
        "is_async": false,
        "docstring": "Remove special characters from input fields\n\nArgs:\n    value: The input string to clean\n    field_type: Type of field ('name', 'location', 'general')\n\nReturns:\n    Cleaned string with special characters removed"
      },
      {
        "name": "clean_email",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 84,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_phone_number",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 90,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_first_name",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 95,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from first name"
      },
      {
        "name": "clean_last_name",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from last name"
      },
      {
        "name": "clean_emergency_contact_name",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 105,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from emergency contact name"
      },
      {
        "name": "clean_city",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 110,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from city name"
      },
      {
        "name": "clean_state",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 115,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from state name"
      },
      {
        "name": "clean_country",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 120,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from country name"
      },
      {
        "name": "clean_occupation",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 125,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from occupation"
      },
      {
        "name": "clean_insurance_provider",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 130,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Clean special characters from insurance provider name"
      },
      {
        "name": "save",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 135,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 154,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 177,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 270,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_amount",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 274,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 316,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_amount",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 328,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_recipient_patient",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 345,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_description",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 359,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 371,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 447,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 451,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 554,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_nhia_reg_number",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 561,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 581,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 603,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_retainership_reg_number",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 610,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "patients\\forms.py",
        "line": 630,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NHIAIndependentPatientFormTest.test_form_saves_patient_and_nhia_patient",
        "type": "method",
        "class": "NHIAIndependentPatientFormTest",
        "file": "patients\\test_forms.py",
        "line": 7,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_form_saves_patient_and_nhia_patient",
        "type": "function",
        "file": "patients\\test_forms.py",
        "line": 7,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [
      {
        "name": "MergePatientForm.clean",
        "type": "method",
        "class": "MergePatientForm",
        "file": "patients\\admin.py",
        "line": 14,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PatientAdmin.merge_patient_action",
        "type": "method",
        "class": "PatientAdmin",
        "file": "patients\\admin.py",
        "line": 66,
        "args": [
          "self",
          "request",
          "queryset"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PatientWalletAdmin.get_readonly_fields",
        "type": "method",
        "class": "PatientWalletAdmin",
        "file": "patients\\admin.py",
        "line": 113,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletTransactionAdmin.get_readonly_fields",
        "type": "method",
        "class": "WalletTransactionAdmin",
        "file": "patients\\admin.py",
        "line": 127,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "patients\\admin.py",
        "line": 14,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "merge_patient_action",
        "type": "function",
        "file": "patients\\admin.py",
        "line": 66,
        "args": [
          "self",
          "request",
          "queryset"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_readonly_fields",
        "type": "function",
        "file": "patients\\admin.py",
        "line": 113,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_readonly_fields",
        "type": "function",
        "file": "patients\\admin.py",
        "line": 127,
        "args": [
          "self",
          "request",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "urls": [],
    "utils": [
      {
        "name": "merge_patients",
        "type": "function",
        "file": "patients\\utils.py",
        "line": 5,
        "args": [
          "primary_patient",
          "secondary_patient",
          "is_nhia_patient",
          "nhia_reg_number"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Merges two patient records, with an option to convert the primary patient to an NHIA patient.\n\nArgs:\n    primary_patient (Patient): The main patient record to merge into.\n    secondary_patient (Patient): The patient record to merge from and then deactivate.\n    is_nhia_patient (bool): If True, the primary patient will be converted to an NHIA patient.\n    nhia_reg_number (str, optional): The NHIA registration number, required if is_nhia_patient is True.\n\nReturns:\n    Patient: The updated primary patient record."
      }
    ],
    "signals": [
      {
        "name": "create_patient_wallet",
        "type": "function",
        "file": "patients\\signals.py",
        "line": 6,
        "args": [
          "sender",
          "instance",
          "created"
        ],
        "decorators": [
          "receiver"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save_patient_wallet",
        "type": "function",
        "file": "patients\\signals.py",
        "line": 11,
        "args": [
          "sender",
          "instance"
        ],
        "decorators": [
          "receiver"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletSignalsTestCase.setUp",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WalletSignalsTestCase.test_patient_wallet_creation",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 45,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that a PatientWallet is created automatically for a new Patient."
      },
      {
        "name": "WalletSignalsTestCase.test_wallet_payment_debit",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 50,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that a wallet payment debits the patient's wallet and updates the invoice.\nThe debit logic is primarily in Payment.save(), but signals ensure consistency."
      },
      {
        "name": "WalletSignalsTestCase.test_non_wallet_payment_updates_invoice",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 81,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that a non-wallet payment updates the invoice amount_paid."
      },
      {
        "name": "WalletSignalsTestCase.test_update_wallet_payment_amount_increase",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test increasing an existing wallet payment amount."
      },
      {
        "name": "WalletSignalsTestCase.test_update_wallet_payment_amount_decrease",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 134,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test decreasing an existing wallet payment amount."
      },
      {
        "name": "WalletSignalsTestCase.test_delete_wallet_payment",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 172,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that deleting a wallet payment credits the wallet back and adjusts the invoice."
      },
      {
        "name": "WalletSignalsTestCase.test_invoice_status_update",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 210,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that invoice status updates correctly based on payments."
      },
      {
        "name": "WalletSignalsTestCase.test_admission_wallet_debit",
        "type": "method",
        "class": "WalletSignalsTestCase",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 245,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that admission fees debit the patient's wallet."
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_patient_wallet_creation",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 45,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that a PatientWallet is created automatically for a new Patient."
      },
      {
        "name": "test_wallet_payment_debit",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 50,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that a wallet payment debits the patient's wallet and updates the invoice.\nThe debit logic is primarily in Payment.save(), but signals ensure consistency."
      },
      {
        "name": "test_non_wallet_payment_updates_invoice",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 81,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that a non-wallet payment updates the invoice amount_paid."
      },
      {
        "name": "test_update_wallet_payment_amount_increase",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test increasing an existing wallet payment amount."
      },
      {
        "name": "test_update_wallet_payment_amount_decrease",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 134,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test decreasing an existing wallet payment amount."
      },
      {
        "name": "test_delete_wallet_payment",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 172,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that deleting a wallet payment credits the wallet back and adjusts the invoice."
      },
      {
        "name": "test_invoice_status_update",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 210,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that invoice status updates correctly based on payments."
      },
      {
        "name": "test_admission_wallet_debit",
        "type": "function",
        "file": "patients\\tests\\test_wallet_signals.py",
        "line": 245,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Test that admission fees debit the patient's wallet."
      }
    ],
    "management_commands": [
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\activate_patients.py",
        "line": 9,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\activate_patients.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "patients\\management\\commands\\activate_patients.py",
        "line": 9,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "patients\\management\\commands\\activate_patients.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\add_initial_wallet_funds.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\add_initial_wallet_funds.py",
        "line": 39,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "patients\\management\\commands\\add_initial_wallet_funds.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "patients\\management\\commands\\add_initial_wallet_funds.py",
        "line": 39,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\check_patient_wallets.py",
        "line": 7,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "patients\\management\\commands\\check_patient_wallets.py",
        "line": 7,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\create_patient_wallets.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\create_patient_wallets.py",
        "line": 29,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "patients\\management\\commands\\create_patient_wallets.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "patients\\management\\commands\\create_patient_wallets.py",
        "line": 29,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\ensure_patients_active.py",
        "line": 9,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\ensure_patients_active.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "patients\\management\\commands\\ensure_patients_active.py",
        "line": 9,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "patients\\management\\commands\\ensure_patients_active.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\update_patient_ids.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "patients\\management\\commands\\update_patient_ids.py",
        "line": 23,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "patients\\management\\commands\\update_patient_ids.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "patients\\management\\commands\\update_patient_ids.py",
        "line": 23,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "PatientsConfig.ready",
        "type": "method",
        "class": "PatientsConfig",
        "file": "patients\\apps.py",
        "line": 8,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ready",
        "type": "function",
        "file": "patients\\apps.py",
        "line": 8,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "all_patients",
        "type": "function",
        "file": "patients\\context_processors.py",
        "line": 3,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Adds all registered patients to the context as 'all_patients'."
      },
      {
        "name": "gender_icon",
        "type": "function",
        "file": "patients\\templatetags\\patient_tags.py",
        "line": 8,
        "args": [
          "gender"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Font Awesome icon for gender\nUsage: {{ patient.gender|gender_icon }}"
      },
      {
        "name": "blood_group_badge",
        "type": "function",
        "file": "patients\\templatetags\\patient_tags.py",
        "line": 21,
        "args": [
          "blood_group"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for blood group\nUsage: {{ patient.blood_group|blood_group_badge }}"
      },
      {
        "name": "calculate_age",
        "type": "function",
        "file": "patients\\templatetags\\patient_tags.py",
        "line": 45,
        "args": [
          "date_of_birth"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Calculate age from date of birth\nUsage: {{ patient.date_of_birth|calculate_age }}"
      },
      {
        "name": "format_phone",
        "type": "function",
        "file": "patients\\templatetags\\patient_tags.py",
        "line": 58,
        "args": [
          "phone_number"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Format a phone number\nUsage: {{ patient.phone_number|format_phone }}"
      },
      {
        "name": "bmi_category",
        "type": "function",
        "file": "patients\\templatetags\\patient_tags.py",
        "line": 76,
        "args": [
          "bmi"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return BMI category based on BMI value\nUsage: {{ vitals.bmi|bmi_category }}"
      },
      {
        "name": "bmi_category_class",
        "type": "function",
        "file": "patients\\templatetags\\patient_tags.py",
        "line": 98,
        "args": [
          "bmi"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return CSS class for BMI category\nUsage: {{ vitals.bmi|bmi_category_class }}"
      },
      {
        "name": "patient_image",
        "type": "function",
        "file": "patients\\templatetags\\patient_tags.py",
        "line": 120,
        "args": [
          "patient",
          "size",
          "css_class"
        ],
        "decorators": [
          "register.inclusion_tag"
        ],
        "is_async": false,
        "docstring": "Render patient profile image with fallback\nUsage: {% patient_image patient size=\"large\" css_class=\"border\" %}\n\nSizes:\n- small: 40x40px (for lists)\n- medium: 100x100px (default)\n- large: 150x150px (for profiles)\n- xlarge: 200x200px (for detailed views)"
      }
    ]
  },
  "doctors": {
    "models": [
      {
        "name": "Specialization.__str__",
        "type": "method",
        "class": "Specialization",
        "file": "doctors\\models.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Doctor.__str__",
        "type": "method",
        "class": "Doctor",
        "file": "doctors\\models.py",
        "line": 39,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Doctor.get_full_name",
        "type": "method",
        "class": "Doctor",
        "file": "doctors\\models.py",
        "line": 42,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Doctor.get_experience_display_value",
        "type": "method",
        "class": "Doctor",
        "file": "doctors\\models.py",
        "line": 45,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorAvailability.__str__",
        "type": "method",
        "class": "DoctorAvailability",
        "file": "doctors\\models.py",
        "line": 70,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorLeave.__str__",
        "type": "method",
        "class": "DoctorLeave",
        "file": "doctors\\models.py",
        "line": 94,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorEducation.__str__",
        "type": "method",
        "class": "DoctorEducation",
        "file": "doctors\\models.py",
        "line": 108,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorExperience.__str__",
        "type": "method",
        "class": "DoctorExperience",
        "file": "doctors\\models.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorReview.__str__",
        "type": "method",
        "class": "DoctorReview",
        "file": "doctors\\models.py",
        "line": 147,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 39,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_full_name",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 42,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_experience_display_value",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 45,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 70,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 94,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 108,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "doctors\\models.py",
        "line": 147,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "doctor_list",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 23,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "View for listing all doctors"
      },
      {
        "name": "doctor_detail",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 70,
        "args": [
          "request",
          "doctor_id"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "View for displaying doctor details"
      },
      {
        "name": "submit_review",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 114,
        "args": [
          "request",
          "doctor_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for submitting a doctor review"
      },
      {
        "name": "manage_doctors",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 152,
        "args": [
          "request"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for managing doctors"
      },
      {
        "name": "add_doctor",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 163,
        "args": [
          "request"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for adding a new doctor"
      },
      {
        "name": "edit_doctor",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 194,
        "args": [
          "request",
          "doctor_id"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for editing a doctor"
      },
      {
        "name": "delete_doctor",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 232,
        "args": [
          "request",
          "doctor_id"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for deleting a doctor"
      },
      {
        "name": "doctor_profile",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 256,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to manage their own profile"
      },
      {
        "name": "manage_availability",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 301,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to manage their availability"
      },
      {
        "name": "delete_availability",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 332,
        "args": [
          "request",
          "availability_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to delete an availability slot"
      },
      {
        "name": "manage_education",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 349,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to manage their education details"
      },
      {
        "name": "delete_education",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 380,
        "args": [
          "request",
          "education_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to delete an education entry"
      },
      {
        "name": "manage_experience",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 397,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to manage their work experience"
      },
      {
        "name": "delete_experience",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 428,
        "args": [
          "request",
          "experience_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to delete a work experience entry"
      },
      {
        "name": "request_leave",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 445,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to request leave"
      },
      {
        "name": "cancel_leave",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 476,
        "args": [
          "request",
          "leave_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to cancel a leave request"
      },
      {
        "name": "manage_leave_requests",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 498,
        "args": [
          "request"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for managing doctor leave requests"
      },
      {
        "name": "approve_leave",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 515,
        "args": [
          "request",
          "leave_id"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for approving a leave request"
      },
      {
        "name": "reject_leave",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 528,
        "args": [
          "request",
          "leave_id"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for rejecting a leave request"
      },
      {
        "name": "manage_specializations",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 542,
        "args": [
          "request"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for managing specializations"
      },
      {
        "name": "edit_specialization",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 563,
        "args": [
          "request",
          "specialization_id"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for editing a specialization"
      },
      {
        "name": "delete_specialization",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 584,
        "args": [
          "request",
          "specialization_id"
        ],
        "decorators": [
          "admin_required"
        ],
        "is_async": false,
        "docstring": "Admin view for deleting a specialization"
      },
      {
        "name": "get_doctor_availability",
        "type": "function",
        "file": "doctors\\views.py",
        "line": 600,
        "args": [
          "request",
          "doctor_id"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "API view to get a doctor's availability for a specific date"
      }
    ],
    "forms": [
      {
        "name": "DoctorUserCreationForm.clean_phone_number",
        "type": "method",
        "class": "DoctorUserCreationForm",
        "file": "doctors\\forms.py",
        "line": 32,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Validate that the phone number contains only digits"
      },
      {
        "name": "DoctorUserCreationForm.save",
        "type": "method",
        "class": "DoctorUserCreationForm",
        "file": "doctors\\forms.py",
        "line": 47,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_specialization_choices",
        "type": "function",
        "file": "doctors\\forms.py",
        "line": 65,
        "args": [],
        "decorators": [],
        "is_async": false,
        "docstring": "Utility to get all specializations as choices for forms."
      },
      {
        "name": "DoctorAvailabilityForm.clean",
        "type": "method",
        "class": "DoctorAvailabilityForm",
        "file": "doctors\\forms.py",
        "line": 114,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorLeaveForm.clean",
        "type": "method",
        "class": "DoctorLeaveForm",
        "file": "doctors\\forms.py",
        "line": 135,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorExperienceForm.clean",
        "type": "method",
        "class": "DoctorExperienceForm",
        "file": "doctors\\forms.py",
        "line": 165,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_phone_number",
        "type": "function",
        "file": "doctors\\forms.py",
        "line": 32,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Validate that the phone number contains only digits"
      },
      {
        "name": "save",
        "type": "function",
        "file": "doctors\\forms.py",
        "line": 47,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "doctors\\forms.py",
        "line": 114,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "doctors\\forms.py",
        "line": 135,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "doctors\\forms.py",
        "line": 165,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [
      {
        "name": "DoctorAdmin.get_full_name",
        "type": "method",
        "class": "DoctorAdmin",
        "file": "doctors\\admin.py",
        "line": 28,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_full_name",
        "type": "function",
        "file": "doctors\\admin.py",
        "line": 28,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "urls": [],
    "utils": [],
    "signals": [
      {
        "name": "update_user_profile_role",
        "type": "function",
        "file": "doctors\\signals.py",
        "line": 8,
        "args": [
          "sender",
          "instance",
          "created"
        ],
        "decorators": [
          "receiver"
        ],
        "is_async": false,
        "docstring": "When a doctor is created or updated, ensure the user has the 'doctor' role"
      },
      {
        "name": "handle_doctor_delete",
        "type": "function",
        "file": "doctors\\signals.py",
        "line": 19,
        "args": [
          "sender",
          "instance"
        ],
        "decorators": [
          "receiver"
        ],
        "is_async": false,
        "docstring": "When a doctor is deleted, remove the 'doctor' role from the user if needed"
      }
    ],
    "management_commands": [
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "doctors\\management\\commands\\populate_hospital_data.py",
        "line": 8,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "doctors\\management\\commands\\populate_hospital_data.py",
        "line": 8,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "DoctorsConfig.ready",
        "type": "method",
        "class": "DoctorsConfig",
        "file": "doctors\\apps.py",
        "line": 9,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ready",
        "type": "function",
        "file": "doctors\\apps.py",
        "line": 9,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ]
  },
  "appointments": {
    "models": [
      {
        "name": "Appointment.__str__",
        "type": "method",
        "class": "Appointment",
        "file": "appointments\\models.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Appointment.is_past_due",
        "type": "method",
        "class": "Appointment",
        "file": "appointments\\models.py",
        "line": 37,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Appointment.is_upcoming",
        "type": "method",
        "class": "Appointment",
        "file": "appointments\\models.py",
        "line": 40,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if appointment is today or in the future"
      },
      {
        "name": "Appointment.is_today",
        "type": "method",
        "class": "Appointment",
        "file": "appointments\\models.py",
        "line": 45,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if appointment is today"
      },
      {
        "name": "AppointmentFollowUp.__str__",
        "type": "method",
        "class": "AppointmentFollowUp",
        "file": "appointments\\models.py",
        "line": 59,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorSchedule.__str__",
        "type": "method",
        "class": "DoctorSchedule",
        "file": "appointments\\models.py",
        "line": 82,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorLeave.__str__",
        "type": "method",
        "class": "DoctorLeave",
        "file": "appointments\\models.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "appointments\\models.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "is_past_due",
        "type": "function",
        "file": "appointments\\models.py",
        "line": 37,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "is_upcoming",
        "type": "function",
        "file": "appointments\\models.py",
        "line": 40,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if appointment is today or in the future"
      },
      {
        "name": "is_today",
        "type": "function",
        "file": "appointments\\models.py",
        "line": 45,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if appointment is today"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "appointments\\models.py",
        "line": 59,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "appointments\\models.py",
        "line": 82,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "appointments\\models.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "appointment_list",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 17,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all appointments with search and filter functionality"
      },
      {
        "name": "create_appointment",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 82,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new appointment"
      },
      {
        "name": "appointment_detail",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 138,
        "args": [
          "request",
          "appointment_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying appointment details"
      },
      {
        "name": "edit_appointment",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 165,
        "args": [
          "request",
          "appointment_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing an appointment"
      },
      {
        "name": "cancel_appointment",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 192,
        "args": [
          "request",
          "appointment_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for cancelling an appointment"
      },
      {
        "name": "appointment_calendar",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 214,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying appointments in a calendar view"
      },
      {
        "name": "doctor_appointments",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 295,
        "args": [
          "request",
          "doctor_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying appointments for a specific doctor"
      },
      {
        "name": "manage_doctor_schedule",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 341,
        "args": [
          "request",
          "doctor_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for managing doctor schedules"
      },
      {
        "name": "delete_doctor_schedule",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 389,
        "args": [
          "request",
          "schedule_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a doctor schedule"
      },
      {
        "name": "manage_doctor_leaves",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 406,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for managing doctor leaves"
      },
      {
        "name": "approve_doctor_leave",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 428,
        "args": [
          "request",
          "leave_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for approving a doctor leave request"
      },
      {
        "name": "delete_doctor_leave",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 445,
        "args": [
          "request",
          "leave_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a doctor leave request"
      },
      {
        "name": "get_available_slots",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 461,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "AJAX view for getting available appointment slots for a doctor on a specific date"
      },
      {
        "name": "update_appointment_status",
        "type": "function",
        "file": "appointments\\views.py",
        "line": 526,
        "args": [
          "request",
          "appointment_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "AJAX view for updating appointment status"
      }
    ],
    "forms": [
      {
        "name": "AppointmentForm.__init__",
        "type": "method",
        "class": "AppointmentForm",
        "file": "appointments\\forms.py",
        "line": 47,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AppointmentForm.clean",
        "type": "method",
        "class": "AppointmentForm",
        "file": "appointments\\forms.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AppointmentFollowUpForm.clean_follow_up_date",
        "type": "method",
        "class": "AppointmentFollowUpForm",
        "file": "appointments\\forms.py",
        "line": 151,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorScheduleForm.clean",
        "type": "method",
        "class": "DoctorScheduleForm",
        "file": "appointments\\forms.py",
        "line": 170,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DoctorLeaveForm.clean",
        "type": "method",
        "class": "DoctorLeaveForm",
        "file": "appointments\\forms.py",
        "line": 199,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "appointments\\forms.py",
        "line": 47,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "appointments\\forms.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_follow_up_date",
        "type": "function",
        "file": "appointments\\forms.py",
        "line": 151,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "appointments\\forms.py",
        "line": 170,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "appointments\\forms.py",
        "line": 199,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "appointment_status_badge",
        "type": "function",
        "file": "appointments\\templatetags\\appointment_tags.py",
        "line": 9,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for appointment status\nUsage: {{ appointment.status|appointment_status_badge }}"
      },
      {
        "name": "priority_badge",
        "type": "function",
        "file": "appointments\\templatetags\\appointment_tags.py",
        "line": 36,
        "args": [
          "priority"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for priority\nUsage: {{ appointment.priority|priority_badge }}"
      },
      {
        "name": "format_time",
        "type": "function",
        "file": "appointments\\templatetags\\appointment_tags.py",
        "line": 53,
        "args": [
          "time_obj"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Format a time object to 12-hour format\nUsage: {{ appointment.appointment_time|format_time }}"
      },
      {
        "name": "is_past_due",
        "type": "function",
        "file": "appointments\\templatetags\\appointment_tags.py",
        "line": 64,
        "args": [
          "appointment_date"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Check if an appointment date is in the past\nUsage: {% if appointment.appointment_date|is_past_due %}...{% endif %}"
      },
      {
        "name": "is_today",
        "type": "function",
        "file": "appointments\\templatetags\\appointment_tags.py",
        "line": 73,
        "args": [
          "appointment_date"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Check if an appointment date is today\nUsage: {% if appointment.appointment_date|is_today %}...{% endif %}"
      },
      {
        "name": "days_until",
        "type": "function",
        "file": "appointments\\templatetags\\appointment_tags.py",
        "line": 82,
        "args": [
          "appointment_date"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Calculate days until an appointment\nUsage: {{ appointment.appointment_date|days_until }}"
      },
      {
        "name": "get_week_dates",
        "type": "function",
        "file": "appointments\\templatetags\\appointment_tags.py",
        "line": 92,
        "args": [
          "year",
          "week_number"
        ],
        "decorators": [
          "register.simple_tag"
        ],
        "is_async": false,
        "docstring": "Get a list of dates for a specific week\nUsage: {% get_week_dates year week_number as dates %}"
      }
    ]
  },
  "pharmacy": {
    "models": [
      {
        "name": "MedicationCategory.__str__",
        "type": "method",
        "class": "MedicationCategory",
        "file": "pharmacy\\models.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Medication.__str__",
        "type": "method",
        "class": "Medication",
        "file": "pharmacy\\models.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Supplier.__str__",
        "type": "method",
        "class": "Supplier",
        "file": "pharmacy\\models.py",
        "line": 60,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Purchase.__str__",
        "type": "method",
        "class": "Purchase",
        "file": "pharmacy\\models.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PurchaseApproval.__str__",
        "type": "method",
        "class": "PurchaseApproval",
        "file": "pharmacy\\models.py",
        "line": 112,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PurchaseItem.__str__",
        "type": "method",
        "class": "PurchaseItem",
        "file": "pharmacy\\models.py",
        "line": 124,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PurchaseItem.save",
        "type": "method",
        "class": "PurchaseItem",
        "file": "pharmacy\\models.py",
        "line": 127,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Prescription.__str__",
        "type": "method",
        "class": "Prescription",
        "file": "pharmacy\\models.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Prescription.get_total_prescribed_price",
        "type": "method",
        "class": "Prescription",
        "file": "pharmacy\\models.py",
        "line": 189,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate the total price of all originally prescribed medications in this prescription"
      },
      {
        "name": "Prescription.get_patient_payable_amount",
        "type": "method",
        "class": "Prescription",
        "file": "pharmacy\\models.py",
        "line": 196,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate the amount patient needs to pay based on their type"
      },
      {
        "name": "Prescription.get_pricing_breakdown",
        "type": "method",
        "class": "Prescription",
        "file": "pharmacy\\models.py",
        "line": 207,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get detailed pricing breakdown for the prescription"
      },
      {
        "name": "Prescription.is_payment_verified",
        "type": "method",
        "class": "Prescription",
        "file": "pharmacy\\models.py",
        "line": 228,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if the prescription payment has been verified and completed"
      },
      {
        "name": "Prescription.can_be_dispensed",
        "type": "method",
        "class": "Prescription",
        "file": "pharmacy\\models.py",
        "line": 242,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if prescription can be dispensed based on payment and other conditions"
      },
      {
        "name": "Prescription.get_payment_status_display_info",
        "type": "method",
        "class": "Prescription",
        "file": "pharmacy\\models.py",
        "line": 259,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get detailed payment status information for display"
      },
      {
        "name": "PrescriptionItem.__str__",
        "type": "method",
        "class": "PrescriptionItem",
        "file": "pharmacy\\models.py",
        "line": 317,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PrescriptionItem.get_medication_price",
        "type": "method",
        "class": "PrescriptionItem",
        "file": "pharmacy\\models.py",
        "line": 320,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PrescriptionItem.remaining_quantity_to_dispense",
        "type": "method",
        "class": "PrescriptionItem",
        "file": "pharmacy\\models.py",
        "line": 324,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PrescriptionItem.remaining_quantity",
        "type": "method",
        "class": "PrescriptionItem",
        "file": "pharmacy\\models.py",
        "line": 328,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Alias for remaining_quantity_to_dispense for cleaner template access"
      },
      {
        "name": "DispensingLog.__str__",
        "type": "method",
        "class": "DispensingLog",
        "file": "pharmacy\\models.py",
        "line": 344,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DispensingLog.save",
        "type": "method",
        "class": "DispensingLog",
        "file": "pharmacy\\models.py",
        "line": 347,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Dispensary.__str__",
        "type": "method",
        "class": "Dispensary",
        "file": "pharmacy\\models.py",
        "line": 368,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MedicationInventory.__str__",
        "type": "method",
        "class": "MedicationInventory",
        "file": "pharmacy\\models.py",
        "line": 384,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MedicationInventory.is_low_stock",
        "type": "method",
        "class": "MedicationInventory",
        "file": "pharmacy\\models.py",
        "line": 387,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MedicationInventory.is_expired",
        "type": "method",
        "class": "MedicationInventory",
        "file": "pharmacy\\models.py",
        "line": 390,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 60,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 112,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 124,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 127,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_total_prescribed_price",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 189,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate the total price of all originally prescribed medications in this prescription"
      },
      {
        "name": "get_patient_payable_amount",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 196,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate the amount patient needs to pay based on their type"
      },
      {
        "name": "get_pricing_breakdown",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 207,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get detailed pricing breakdown for the prescription"
      },
      {
        "name": "is_payment_verified",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 228,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if the prescription payment has been verified and completed"
      },
      {
        "name": "can_be_dispensed",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 242,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if prescription can be dispensed based on payment and other conditions"
      },
      {
        "name": "get_payment_status_display_info",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 259,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Get detailed payment status information for display"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 317,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_medication_price",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 320,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "remaining_quantity_to_dispense",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 324,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "remaining_quantity",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 328,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Alias for remaining_quantity_to_dispense for cleaner template access"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 344,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 347,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 368,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 384,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "is_low_stock",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 387,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "is_expired",
        "type": "function",
        "file": "pharmacy\\models.py",
        "line": 390,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "create_prescription",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 46,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "dispensed_items_tracker",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 165,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "dispensed_item_detail",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 259,
        "args": [
          "request",
          "log_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "dispensed_items_export",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 276,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "medication_autocomplete",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 336,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "pharmacy_dashboard",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 345,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_dispensary",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 352,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "dispensary_list",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 370,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "edit_dispensary",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 379,
        "args": [
          "request",
          "dispensary_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "delete_dispensary",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 398,
        "args": [
          "request",
          "dispensary_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_dispensary_inventory_item",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 411,
        "args": [
          "request",
          "dispensary_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "edit_dispensary_inventory_item",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 433,
        "args": [
          "request",
          "dispensary_id",
          "inventory_item_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "delete_dispensary_inventory_item",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 456,
        "args": [
          "request",
          "dispensary_id",
          "inventory_item_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "dispensary_inventory",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 473,
        "args": [
          "request",
          "dispensary_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "inventory_list",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 486,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_medication",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 519,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "medication_detail",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 538,
        "args": [
          "request",
          "medication_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "edit_medication",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 548,
        "args": [
          "request",
          "medication_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "delete_medication",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 568,
        "args": [
          "request",
          "medication_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "manage_categories",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 582,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "edit_category",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 603,
        "args": [
          "request",
          "category_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "delete_category",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 623,
        "args": [
          "request",
          "category_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "manage_suppliers",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 637,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "edit_supplier",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 658,
        "args": [
          "request",
          "supplier_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "delete_supplier",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 678,
        "args": [
          "request",
          "supplier_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "manage_purchases",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 692,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_purchase",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 702,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "purchase_detail",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 723,
        "args": [
          "request",
          "purchase_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "delete_purchase_item",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 735,
        "args": [
          "request",
          "item_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "submit_purchase_for_approval",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 751,
        "args": [
          "request",
          "purchase_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "approve_purchase",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 771,
        "args": [
          "request",
          "purchase_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "reject_purchase",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 791,
        "args": [
          "request",
          "purchase_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "prescription_list",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 811,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": "Enhanced prescription list with comprehensive search functionality"
      },
      {
        "name": "prescription_detail",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 873,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "print_prescription",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 891,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "update_prescription_status",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 903,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "dispense_prescription",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 923,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Modern dispensing view with formset support"
      },
      {
        "name": "dispense_prescription_original",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 991,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Original dispensing view using template"
      },
      {
        "name": "_handle_dispensing_submission",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1020,
        "args": [
          "request",
          "prescription"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Handle the actual dispensing process with enhanced error handling and workflow logic"
      },
      {
        "name": "_update_prescription_status_after_dispensing",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1133,
        "args": [
          "prescription"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Update prescription status based on dispensing progress and handle invoice updates"
      },
      {
        "name": "_handle_formset_dispensing_submission",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1170,
        "args": [
          "request",
          "prescription"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Handle dispensing submission from formset-based template"
      },
      {
        "name": "prescription_dispensing_history",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1291,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_prescription_item",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1305,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_medication_stock",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1346,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": "View for adding medication stock to dispensary inventory via UI"
      },
      {
        "name": "quick_add_stock",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1408,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": "AJAX view for quickly adding stock from dispense prescription page"
      },
      {
        "name": "delete_prescription_item",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1467,
        "args": [
          "request",
          "item_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "medication_api",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1482,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_stock_quantities",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1491,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "AJAX view to get stock quantities for prescription items at a specific dispensary"
      },
      {
        "name": "expiring_medications_report",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1550,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "low_stock_medications_report",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1566,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "dispensing_report",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1576,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "pharmacy_sales_report",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1580,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Comprehensive pharmacy sales statistics by dispensaries"
      },
      {
        "name": "debug_dispense_prescription",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1737,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Debug version of the dispensing view"
      },
      {
        "name": "dispensary_inventory",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1782,
        "args": [
          "request",
          "dispensary_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "prescription_payment",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1796,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": "Handle payment processing for prescription invoices"
      },
      {
        "name": "create_prescription_invoice",
        "type": "function",
        "file": "pharmacy\\views.py",
        "line": 1908,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required",
          "permission_required"
        ],
        "is_async": false,
        "docstring": "Create an invoice for a prescription"
      }
    ],
    "forms": [
      {
        "name": "PurchaseItemForm.clean",
        "type": "method",
        "class": "PurchaseItemForm",
        "file": "pharmacy\\forms.py",
        "line": 89,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PrescriptionForm.__init__",
        "type": "method",
        "class": "PrescriptionForm",
        "file": "pharmacy\\forms.py",
        "line": 118,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PrescriptionItemForm.clean_quantity",
        "type": "method",
        "class": "PrescriptionItemForm",
        "file": "pharmacy\\forms.py",
        "line": 167,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DispenseItemForm.__init__",
        "type": "method",
        "class": "DispenseItemForm",
        "file": "pharmacy\\forms.py",
        "line": 193,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DispenseItemForm.p_item",
        "type": "method",
        "class": "DispenseItemForm",
        "file": "pharmacy\\forms.py",
        "line": 259,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Expose the prescription_item to the template."
      },
      {
        "name": "DispenseItemForm.stock_available",
        "type": "method",
        "class": "DispenseItemForm",
        "file": "pharmacy\\forms.py",
        "line": 265,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Expose the available stock to the template."
      },
      {
        "name": "DispenseItemForm.clean",
        "type": "method",
        "class": "DispenseItemForm",
        "file": "pharmacy\\forms.py",
        "line": 269,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "BaseDispenseItemFormSet.__init__",
        "type": "method",
        "class": "BaseDispenseItemFormSet",
        "file": "pharmacy\\forms.py",
        "line": 339,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "BaseDispenseItemFormSet.add_fields",
        "type": "method",
        "class": "BaseDispenseItemFormSet",
        "file": "pharmacy\\forms.py",
        "line": 343,
        "args": [
          "self",
          "form",
          "index"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "BaseDispenseItemFormSet.clean",
        "type": "method",
        "class": "BaseDispenseItemFormSet",
        "file": "pharmacy\\forms.py",
        "line": 363,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DispensedItemsSearchForm.clean",
        "type": "method",
        "class": "DispensedItemsSearchForm",
        "file": "pharmacy\\forms.py",
        "line": 511,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DispensaryForm.__init__",
        "type": "method",
        "class": "DispensaryForm",
        "file": "pharmacy\\forms.py",
        "line": 557,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PrescriptionPaymentForm.__init__",
        "type": "method",
        "class": "PrescriptionPaymentForm",
        "file": "pharmacy\\forms.py",
        "line": 575,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 89,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 118,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean_quantity",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 167,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 193,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "p_item",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 259,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Expose the prescription_item to the template."
      },
      {
        "name": "stock_available",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 265,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": "Expose the available stock to the template."
      },
      {
        "name": "clean",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 269,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 339,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_fields",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 343,
        "args": [
          "self",
          "form",
          "index"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 363,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 511,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 557,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "pharmacy\\forms.py",
        "line": 575,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [
      {
        "name": "IsolatedCreatePrescriptionTest.setUp",
        "type": "method",
        "class": "IsolatedCreatePrescriptionTest",
        "file": "pharmacy\\temp_test.py",
        "line": 15,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "IsolatedCreatePrescriptionTest.test_successful_prescription_creation",
        "type": "method",
        "class": "IsolatedCreatePrescriptionTest",
        "file": "pharmacy\\temp_test.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "pharmacy\\temp_test.py",
        "line": 15,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_successful_prescription_creation",
        "type": "function",
        "file": "pharmacy\\temp_test.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CreatePrescriptionTestCase.setUp",
        "type": "method",
        "class": "CreatePrescriptionTestCase",
        "file": "pharmacy\\tests.py",
        "line": 15,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CreatePrescriptionTestCase.test_create_prescription_with_invoice",
        "type": "method",
        "class": "CreatePrescriptionTestCase",
        "file": "pharmacy\\tests.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "CreatePrescriptionTestCase.test_create_prescription_without_service",
        "type": "method",
        "class": "CreatePrescriptionTestCase",
        "file": "pharmacy\\tests.py",
        "line": 54,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "pharmacy\\tests.py",
        "line": 15,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_create_prescription_with_invoice",
        "type": "function",
        "file": "pharmacy\\tests.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_create_prescription_without_service",
        "type": "function",
        "file": "pharmacy\\tests.py",
        "line": 54,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "other": [
      {
        "name": "PharmacyConfig.ready",
        "type": "method",
        "class": "PharmacyConfig",
        "file": "pharmacy\\apps.py",
        "line": 8,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ready",
        "type": "function",
        "file": "pharmacy\\apps.py",
        "line": 8,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "pharmacy_context",
        "type": "function",
        "file": "pharmacy\\context_processors.py",
        "line": 4,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Context processor for pharmacy app\nAdds today's date and expiry warning date (30 days from now)"
      },
      {
        "name": "prescription_status_badge",
        "type": "function",
        "file": "pharmacy\\templatetags\\pharmacy_tags.py",
        "line": 8,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for prescription status\nUsage: {{ prescription.status|prescription_status_badge }}"
      },
      {
        "name": "calculate_total_price",
        "type": "function",
        "file": "pharmacy\\templatetags\\pharmacy_tags.py",
        "line": 33,
        "args": [
          "quantity",
          "price"
        ],
        "decorators": [
          "register.simple_tag"
        ],
        "is_async": false,
        "docstring": "Calculate total price from quantity and unit price\nUsage: {% calculate_total_price item.quantity item.medication.price %}"
      },
      {
        "name": "get_item",
        "type": "function",
        "file": "pharmacy\\templatetags\\pharmacy_tags.py",
        "line": 44,
        "args": [
          "list_data",
          "index"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "timeuntil_days",
        "type": "function",
        "file": "pharmacy\\templatetags\\pharmacy_tags.py",
        "line": 51,
        "args": [
          "value"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Calculates the number of days until a date, or days since if in the past.\nReturns an integer."
      },
      {
        "name": "abs_val",
        "type": "function",
        "file": "pharmacy\\templatetags\\pharmacy_tags.py",
        "line": 63,
        "args": [
          "value"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Returns the absolute value of the input."
      }
    ]
  },
  "laboratory": {
    "models": [
      {
        "name": "TestCategory.__str__",
        "type": "method",
        "class": "TestCategory",
        "file": "laboratory\\models.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Test.__str__",
        "type": "method",
        "class": "Test",
        "file": "laboratory\\models.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestParameter.__str__",
        "type": "method",
        "class": "TestParameter",
        "file": "laboratory\\models.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestRequest.__str__",
        "type": "method",
        "class": "TestRequest",
        "file": "laboratory\\models.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestRequest.get_total_price",
        "type": "method",
        "class": "TestRequest",
        "file": "laboratory\\models.py",
        "line": 79,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestResult.__str__",
        "type": "method",
        "class": "TestResult",
        "file": "laboratory\\models.py",
        "line": 104,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestResultParameter.__str__",
        "type": "method",
        "class": "TestResultParameter",
        "file": "laboratory\\models.py",
        "line": 122,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "laboratory\\models.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "laboratory\\models.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "laboratory\\models.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "laboratory\\models.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_total_price",
        "type": "function",
        "file": "laboratory\\models.py",
        "line": 79,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "laboratory\\models.py",
        "line": 104,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "laboratory\\models.py",
        "line": 122,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "laboratory_payment",
        "type": "function",
        "file": "laboratory\\payment_views.py",
        "line": 17,
        "args": [
          "request",
          "test_request_id"
        ],
        "decorators": [
          "login_required",
          "require_http_methods"
        ],
        "is_async": false,
        "docstring": "Handle laboratory test payment processing with dual payment methods"
      },
      {
        "name": "laboratory_payment_history",
        "type": "function",
        "file": "laboratory\\payment_views.py",
        "line": 97,
        "args": [
          "request",
          "test_request_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View payment history for a laboratory test request"
      },
      {
        "name": "confirm_lab_payment",
        "type": "function",
        "file": "laboratory\\payment_views.py",
        "line": 118,
        "args": [
          "request",
          "test_request_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Confirm laboratory payment and update test request status"
      },
      {
        "name": "result_list",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 32,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Enhanced view for listing all test results with comprehensive search"
      },
      {
        "name": "result_detail",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 134,
        "args": [
          "request",
          "result_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying a single test result"
      },
      {
        "name": "edit_test_result",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 152,
        "args": [
          "request",
          "result_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a test result"
      },
      {
        "name": "test_list",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 176,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all tests"
      },
      {
        "name": "add_test",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 226,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for adding a new test"
      },
      {
        "name": "edit_test",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 245,
        "args": [
          "request",
          "test_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a test"
      },
      {
        "name": "delete_test",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 280,
        "args": [
          "request",
          "test_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a test (soft delete)"
      },
      {
        "name": "delete_parameter",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 297,
        "args": [
          "request",
          "parameter_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a test parameter"
      },
      {
        "name": "manage_categories",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 315,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for managing test categories"
      },
      {
        "name": "edit_category",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 337,
        "args": [
          "request",
          "category_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a test category"
      },
      {
        "name": "delete_category",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 359,
        "args": [
          "request",
          "category_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a test category"
      },
      {
        "name": "lab_statistics_report",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 381,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Comprehensive laboratory statistics and reporting"
      },
      {
        "name": "test_request_list",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 518,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all test requests"
      },
      {
        "name": "create_test_request",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 601,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new test request and associated invoice."
      },
      {
        "name": "test_request_detail",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 735,
        "args": [
          "request",
          "request_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "update_test_request_status",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 754,
        "args": [
          "request",
          "request_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for updating test request status"
      },
      {
        "name": "create_test_result",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 778,
        "args": [
          "request",
          "request_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new test result"
      },
      {
        "name": "result_list",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 878,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all test results"
      },
      {
        "name": "result_detail",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 894,
        "args": [
          "request",
          "result_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying test result details"
      },
      {
        "name": "edit_test_result",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 907,
        "args": [
          "request",
          "result_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a test result and its parameters."
      },
      {
        "name": "print_result",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 955,
        "args": [
          "request",
          "result_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for printing a test result"
      },
      {
        "name": "verify_test_result",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 973,
        "args": [
          "request",
          "result_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for verifying a test result"
      },
      {
        "name": "patient_tests",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 1018,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying tests for a specific patient"
      },
      {
        "name": "test_api",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 1031,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "API view for getting test information"
      },
      {
        "name": "laboratory_sales_report",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 1048,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for daily tests by doctor and total monthly lab revenue."
      },
      {
        "name": "radiology_sales_report",
        "type": "function",
        "file": "laboratory\\views.py",
        "line": 1085,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for daily radiology tests by user and total monthly radiology revenue."
      }
    ],
    "forms": [
      {
        "name": "TestRequestForm.__init__",
        "type": "method",
        "class": "TestRequestForm",
        "file": "laboratory\\forms.py",
        "line": 81,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestResultForm.__init__",
        "type": "method",
        "class": "TestResultForm",
        "file": "laboratory\\forms.py",
        "line": 129,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestResultForm.save",
        "type": "method",
        "class": "TestResultForm",
        "file": "laboratory\\forms.py",
        "line": 136,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestResultParameterForm.__init__",
        "type": "method",
        "class": "TestResultParameterForm",
        "file": "laboratory\\forms.py",
        "line": 158,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "BaseTestResultParameterFormSet.__init__",
        "type": "method",
        "class": "BaseTestResultParameterFormSet",
        "file": "laboratory\\forms.py",
        "line": 175,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "BaseTestResultParameterFormSet.clean",
        "type": "method",
        "class": "BaseTestResultParameterFormSet",
        "file": "laboratory\\forms.py",
        "line": 187,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TestSearchForm.__init__",
        "type": "method",
        "class": "TestSearchForm",
        "file": "laboratory\\forms.py",
        "line": 262,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "laboratory\\forms.py",
        "line": 81,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "laboratory\\forms.py",
        "line": 129,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "laboratory\\forms.py",
        "line": 136,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "laboratory\\forms.py",
        "line": 158,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "laboratory\\forms.py",
        "line": 175,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "laboratory\\forms.py",
        "line": 187,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "laboratory\\forms.py",
        "line": 262,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LaboratoryPaymentForm.__init__",
        "type": "method",
        "class": "LaboratoryPaymentForm",
        "file": "laboratory\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LaboratoryPaymentForm.clean",
        "type": "method",
        "class": "LaboratoryPaymentForm",
        "file": "laboratory\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LaboratoryPaymentForm.save",
        "type": "method",
        "class": "LaboratoryPaymentForm",
        "file": "laboratory\\payment_forms.py",
        "line": 91,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "laboratory\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "laboratory\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "laboratory\\payment_forms.py",
        "line": 91,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "laboratory\\management\\commands\\populate_lab_tests.py",
        "line": 586,
        "args": [
          "self"
        ],
        "decorators": [
          "transaction.atomic"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "laboratory\\management\\commands\\populate_lab_tests.py",
        "line": 586,
        "args": [
          "self"
        ],
        "decorators": [
          "transaction.atomic"
        ],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "test_request_status_badge",
        "type": "function",
        "file": "laboratory\\templatetags\\laboratory_tags.py",
        "line": 7,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for test request status\nUsage: {{ test_request.status|test_request_status_badge }}"
      },
      {
        "name": "priority_badge",
        "type": "function",
        "file": "laboratory\\templatetags\\laboratory_tags.py",
        "line": 34,
        "args": [
          "priority"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for priority\nUsage: {{ test_request.priority|priority_badge }}"
      },
      {
        "name": "result_status_badge",
        "type": "function",
        "file": "laboratory\\templatetags\\laboratory_tags.py",
        "line": 51,
        "args": [
          "is_normal"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for test result status\nUsage: {{ parameter.is_normal|result_status_badge }}"
      },
      {
        "name": "format_result_value",
        "type": "function",
        "file": "laboratory\\templatetags\\laboratory_tags.py",
        "line": 62,
        "args": [
          "value",
          "parameter"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Format a test result value with appropriate styling\nUsage: {{ result.value|format_result_value:result.parameter }}"
      },
      {
        "name": "is_value_in_range",
        "type": "function",
        "file": "laboratory\\templatetags\\laboratory_tags.py",
        "line": 79,
        "args": [
          "value",
          "normal_range"
        ],
        "decorators": [
          "register.simple_tag"
        ],
        "is_async": false,
        "docstring": "Check if a value is within a normal range\nUsage: {% is_value_in_range result.value parameter.normal_range as is_normal %}"
      }
    ]
  },
  "billing": {
    "models": [
      {
        "name": "ServiceCategory.__str__",
        "type": "method",
        "class": "ServiceCategory",
        "file": "billing\\models.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Service.__str__",
        "type": "method",
        "class": "Service",
        "file": "billing\\models.py",
        "line": 32,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Service.get_price_with_tax",
        "type": "method",
        "class": "Service",
        "file": "billing\\models.py",
        "line": 35,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Invoice.__str__",
        "type": "method",
        "class": "Invoice",
        "file": "billing\\models.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Invoice.get_balance",
        "type": "method",
        "class": "Invoice",
        "file": "billing\\models.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Invoice.is_paid",
        "type": "method",
        "class": "Invoice",
        "file": "billing\\models.py",
        "line": 103,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Invoice.save",
        "type": "method",
        "class": "Invoice",
        "file": "billing\\models.py",
        "line": 106,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Invoice._generate_invoice_number",
        "type": "method",
        "class": "Invoice",
        "file": "billing\\models.py",
        "line": 152,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Generate a unique invoice number in the format INVYYYYMMDDXXXX\nwhere XXXX is a zero-padded sequence for the day."
      },
      {
        "name": "InvoiceItem.__str__",
        "type": "method",
        "class": "InvoiceItem",
        "file": "billing\\models.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "InvoiceItem.save",
        "type": "method",
        "class": "InvoiceItem",
        "file": "billing\\models.py",
        "line": 189,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Payment.__str__",
        "type": "method",
        "class": "Payment",
        "file": "billing\\models.py",
        "line": 211,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Payment.save",
        "type": "method",
        "class": "Payment",
        "file": "billing\\models.py",
        "line": 214,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "billing\\models.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "billing\\models.py",
        "line": 32,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_price_with_tax",
        "type": "function",
        "file": "billing\\models.py",
        "line": 35,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "billing\\models.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_balance",
        "type": "function",
        "file": "billing\\models.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "is_paid",
        "type": "function",
        "file": "billing\\models.py",
        "line": 103,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "billing\\models.py",
        "line": 106,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "_generate_invoice_number",
        "type": "function",
        "file": "billing\\models.py",
        "line": 152,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Generate a unique invoice number in the format INVYYYYMMDDXXXX\nwhere XXXX is a zero-padded sequence for the day."
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "billing\\models.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "billing\\models.py",
        "line": 189,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "billing\\models.py",
        "line": 211,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "billing\\models.py",
        "line": 214,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "invoice_list",
        "type": "function",
        "file": "billing\\views.py",
        "line": 22,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all invoices with search and filter functionality"
      },
      {
        "name": "create_invoice",
        "type": "function",
        "file": "billing\\views.py",
        "line": 87,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new invoice"
      },
      {
        "name": "invoice_detail",
        "type": "function",
        "file": "billing\\views.py",
        "line": 131,
        "args": [
          "request",
          "invoice_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying invoice details"
      },
      {
        "name": "edit_invoice",
        "type": "function",
        "file": "billing\\views.py",
        "line": 167,
        "args": [
          "request",
          "invoice_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing an invoice"
      },
      {
        "name": "delete_invoice",
        "type": "function",
        "file": "billing\\views.py",
        "line": 194,
        "args": [
          "request",
          "invoice_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting an invoice"
      },
      {
        "name": "print_invoice",
        "type": "function",
        "file": "billing\\views.py",
        "line": 221,
        "args": [
          "request",
          "invoice_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for printing an invoice"
      },
      {
        "name": "record_payment",
        "type": "function",
        "file": "billing\\views.py",
        "line": 237,
        "args": [
          "request",
          "invoice_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Enhanced view for recording payments with dual payment method support"
      },
      {
        "name": "service_list",
        "type": "function",
        "file": "billing\\views.py",
        "line": 331,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all services"
      },
      {
        "name": "add_service",
        "type": "function",
        "file": "billing\\views.py",
        "line": 353,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Redirect to service_list view which handles both listing and adding"
      },
      {
        "name": "edit_service",
        "type": "function",
        "file": "billing\\views.py",
        "line": 359,
        "args": [
          "request",
          "service_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a service"
      },
      {
        "name": "delete_service",
        "type": "function",
        "file": "billing\\views.py",
        "line": 381,
        "args": [
          "request",
          "service_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a service"
      },
      {
        "name": "patient_invoices",
        "type": "function",
        "file": "billing\\views.py",
        "line": 402,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying invoices for a specific patient"
      },
      {
        "name": "admission_invoices",
        "type": "function",
        "file": "billing\\views.py",
        "line": 423,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all admissions with their billing status"
      },
      {
        "name": "billing_reports",
        "type": "function",
        "file": "billing\\views.py",
        "line": 447,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for billing summary and reporting"
      },
      {
        "name": "export_billing_report_csv",
        "type": "function",
        "file": "billing\\views.py",
        "line": 504,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Export billing report as CSV (by department, service, provider)"
      },
      {
        "name": "create_invoice_for_prescription",
        "type": "function",
        "file": "billing\\views.py",
        "line": 522,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Create an invoice for a prescription if not already created."
      },
      {
        "name": "medication_billing_dashboard",
        "type": "function",
        "file": "billing\\views.py",
        "line": 572,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Dashboard for medication billing management"
      },
      {
        "name": "prescription_billing_detail",
        "type": "function",
        "file": "billing\\views.py",
        "line": 605,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Detailed view for prescription billing with individual item breakdown"
      },
      {
        "name": "process_medication_payment",
        "type": "function",
        "file": "billing\\views.py",
        "line": 660,
        "args": [
          "request",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Process payment for medication prescription from billing office"
      },
      {
        "name": "create_invoice_for_admission",
        "type": "function",
        "file": "billing\\views.py",
        "line": 730,
        "args": [
          "request",
          "admission_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Create an invoice for an admission if not already created."
      },
      {
        "name": "admission_payment",
        "type": "function",
        "file": "billing\\views.py",
        "line": 780,
        "args": [
          "request",
          "admission_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Enhanced view for processing admission payments from billing office or patient wallet"
      }
    ],
    "forms": [
      {
        "name": "InvoiceForm.__init__",
        "type": "method",
        "class": "InvoiceForm",
        "file": "billing\\forms.py",
        "line": 17,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "InvoiceItemForm.__init__",
        "type": "method",
        "class": "InvoiceItemForm",
        "file": "billing\\forms.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "InvoiceItemForm.clean",
        "type": "method",
        "class": "InvoiceItemForm",
        "file": "billing\\forms.py",
        "line": 53,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PaymentForm.__init__",
        "type": "method",
        "class": "PaymentForm",
        "file": "billing\\forms.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PaymentForm.clean",
        "type": "method",
        "class": "PaymentForm",
        "file": "billing\\forms.py",
        "line": 105,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionPaymentForm.__init__",
        "type": "method",
        "class": "AdmissionPaymentForm",
        "file": "billing\\forms.py",
        "line": 150,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionPaymentForm.clean",
        "type": "method",
        "class": "AdmissionPaymentForm",
        "file": "billing\\forms.py",
        "line": 165,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "billing\\forms.py",
        "line": 17,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "billing\\forms.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "billing\\forms.py",
        "line": 53,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "billing\\forms.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "billing\\forms.py",
        "line": 105,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "billing\\forms.py",
        "line": 150,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "billing\\forms.py",
        "line": 165,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "billing\\management\\commands\\create_admission_service.py",
        "line": 7,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "billing\\management\\commands\\create_admission_service.py",
        "line": 7,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "currency",
        "type": "function",
        "file": "billing\\templatetags\\billing_tags.py",
        "line": 7,
        "args": [
          "value"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Format a value as currency (Nigerian Naira)\nUsage: {{ value|currency }}"
      },
      {
        "name": "payment_status_badge",
        "type": "function",
        "file": "billing\\templatetags\\billing_tags.py",
        "line": 19,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for payment status\nUsage: {{ invoice.status|payment_status_badge }}"
      },
      {
        "name": "percentage",
        "type": "function",
        "file": "billing\\templatetags\\billing_tags.py",
        "line": 48,
        "args": [
          "value",
          "decimal_places"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Format a value as percentage\nUsage: {{ value|percentage }}"
      },
      {
        "name": "calculate_subtotal",
        "type": "function",
        "file": "billing\\templatetags\\billing_tags.py",
        "line": 60,
        "args": [
          "quantity",
          "unit_price"
        ],
        "decorators": [
          "register.simple_tag"
        ],
        "is_async": false,
        "docstring": "Calculate subtotal from quantity and unit price\nUsage: {% calculate_subtotal item.quantity item.unit_price %}"
      }
    ]
  },
  "inpatient": {
    "models": [
      {
        "name": "Ward.__str__",
        "type": "method",
        "class": "Ward",
        "file": "inpatient\\models.py",
        "line": 49,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Ward.get_available_beds_count",
        "type": "method",
        "class": "Ward",
        "file": "inpatient\\models.py",
        "line": 52,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Ward.get_occupied_beds_count",
        "type": "method",
        "class": "Ward",
        "file": "inpatient\\models.py",
        "line": 55,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Bed.__str__",
        "type": "method",
        "class": "Bed",
        "file": "inpatient\\models.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Admission.__str__",
        "type": "method",
        "class": "Admission",
        "file": "inpatient\\models.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Admission.get_duration",
        "type": "method",
        "class": "Admission",
        "file": "inpatient\\models.py",
        "line": 103,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Admission.get_total_cost",
        "type": "method",
        "class": "Admission",
        "file": "inpatient\\models.py",
        "line": 108,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate the total cost of the admission based on duration and bed charges"
      },
      {
        "name": "Admission.save",
        "type": "method",
        "class": "Admission",
        "file": "inpatient\\models.py",
        "line": 119,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DailyRound.__str__",
        "type": "method",
        "class": "DailyRound",
        "file": "inpatient\\models.py",
        "line": 155,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NursingNote.__str__",
        "type": "method",
        "class": "NursingNote",
        "file": "inpatient\\models.py",
        "line": 170,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "BedTransfer.__str__",
        "type": "method",
        "class": "BedTransfer",
        "file": "inpatient\\models.py",
        "line": 183,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WardTransfer.__str__",
        "type": "method",
        "class": "WardTransfer",
        "file": "inpatient\\models.py",
        "line": 193,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ClinicalRecord.__str__",
        "type": "method",
        "class": "ClinicalRecord",
        "file": "inpatient\\models.py",
        "line": 227,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "InpatientMedication.__str__",
        "type": "method",
        "class": "InpatientMedication",
        "file": "inpatient\\models.py",
        "line": 254,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "InpatientMedication.get_total_cost",
        "type": "method",
        "class": "InpatientMedication",
        "file": "inpatient\\models.py",
        "line": 257,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate total cost of the prescription"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 49,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_available_beds_count",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 52,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_occupied_beds_count",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 55,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_duration",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 103,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_total_cost",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 108,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate the total cost of the admission based on duration and bed charges"
      },
      {
        "name": "save",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 119,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 155,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 170,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 183,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 193,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 227,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 254,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_total_cost",
        "type": "function",
        "file": "inpatient\\models.py",
        "line": 257,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate total cost of the prescription"
      }
    ],
    "views": [
      {
        "name": "inpatient_medication_payment",
        "type": "function",
        "file": "inpatient\\payment_views.py",
        "line": 18,
        "args": [
          "request",
          "admission_id",
          "prescription_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Process payment for inpatient medication from billing office or patient wallet"
      },
      {
        "name": "inpatient_medication_list",
        "type": "function",
        "file": "inpatient\\payment_views.py",
        "line": 166,
        "args": [
          "request",
          "admission_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "List all medications for an admission"
      },
      {
        "name": "bed_dashboard",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 21,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Visual dashboard for bed management"
      },
      {
        "name": "patient_admissions",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 65,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "List of admissions for a specific patient."
      },
      {
        "name": "ward_list",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 91,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all wards"
      },
      {
        "name": "add_ward",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 135,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for adding a new ward"
      },
      {
        "name": "ward_detail",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 154,
        "args": [
          "request",
          "ward_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying ward details"
      },
      {
        "name": "edit_ward",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 182,
        "args": [
          "request",
          "ward_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a ward"
      },
      {
        "name": "delete_ward",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 204,
        "args": [
          "request",
          "ward_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a ward"
      },
      {
        "name": "bed_list",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 227,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all beds"
      },
      {
        "name": "add_bed",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 282,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for adding a new bed"
      },
      {
        "name": "edit_bed",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 316,
        "args": [
          "request",
          "bed_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a bed"
      },
      {
        "name": "delete_bed",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 338,
        "args": [
          "request",
          "bed_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a bed"
      },
      {
        "name": "admission_list",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 363,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all admissions"
      },
      {
        "name": "admission_detail",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 446,
        "args": [
          "request",
          "pk"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for displaying admission details."
      },
      {
        "name": "create_admission",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 490,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new admission"
      },
      {
        "name": "edit_admission",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 609,
        "args": [
          "request",
          "admission_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing an admission"
      },
      {
        "name": "transfer_patient",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 631,
        "args": [
          "request",
          "admission_id"
        ],
        "decorators": [
          "login_required",
          "require_http_methods"
        ],
        "is_async": false,
        "docstring": "Handles both bed and ward transfers for a patient."
      },
      {
        "name": "discharge_patient",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 690,
        "args": [
          "request",
          "admission_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for discharging a patient"
      },
      {
        "name": "add_clinical_record",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 723,
        "args": [
          "request",
          "admission_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for adding a clinical record to an admission"
      },
      {
        "name": "bed_occupancy_report",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 748,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Enhanced view for generating comprehensive bed occupancy report with statistics"
      },
      {
        "name": "load_beds",
        "type": "function",
        "file": "inpatient\\views.py",
        "line": 831,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "AJAX view to load beds based on selected ward."
      }
    ],
    "forms": [
      {
        "name": "get_specialization_choices",
        "type": "function",
        "file": "inpatient\\forms.py",
        "line": 11,
        "args": [],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "BedForm.clean",
        "type": "method",
        "class": "BedForm",
        "file": "inpatient\\forms.py",
        "line": 39,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionForm.__init__",
        "type": "method",
        "class": "AdmissionForm",
        "file": "inpatient\\forms.py",
        "line": 74,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DischargeForm.__init__",
        "type": "method",
        "class": "DischargeForm",
        "file": "inpatient\\forms.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DailyRoundForm.__init__",
        "type": "method",
        "class": "DailyRoundForm",
        "file": "inpatient\\forms.py",
        "line": 124,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NursingNoteForm.__init__",
        "type": "method",
        "class": "NursingNoteForm",
        "file": "inpatient\\forms.py",
        "line": 145,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ClinicalRecordForm.__init__",
        "type": "method",
        "class": "ClinicalRecordForm",
        "file": "inpatient\\forms.py",
        "line": 219,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PatientTransferForm.__init__",
        "type": "method",
        "class": "PatientTransferForm",
        "file": "inpatient\\forms.py",
        "line": 229,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "inpatient\\forms.py",
        "line": 39,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "inpatient\\forms.py",
        "line": 74,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "inpatient\\forms.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "inpatient\\forms.py",
        "line": 124,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "inpatient\\forms.py",
        "line": 145,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "inpatient\\forms.py",
        "line": 219,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "inpatient\\forms.py",
        "line": 229,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "InpatientMedicationPaymentForm.__init__",
        "type": "method",
        "class": "InpatientMedicationPaymentForm",
        "file": "inpatient\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "InpatientMedicationPaymentForm.clean",
        "type": "method",
        "class": "InpatientMedicationPaymentForm",
        "file": "inpatient\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "inpatient\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "inpatient\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [
      {
        "name": "create_admission_invoice_and_deduct_wallet",
        "type": "function",
        "file": "inpatient\\signals.py",
        "line": 12,
        "args": [
          "sender",
          "instance",
          "created"
        ],
        "decorators": [
          "receiver"
        ],
        "is_async": false,
        "docstring": null
      }
    ],
    "management_commands": [
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "inpatient\\management\\commands\\fix_admission_billing.py",
        "line": 14,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "inpatient\\management\\commands\\fix_admission_billing.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "inpatient\\management\\commands\\fix_admission_billing.py",
        "line": 14,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "inpatient\\management\\commands\\fix_admission_billing.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [],
    "tests": [
      {
        "name": "AdmissionBillingTest.setUp",
        "type": "method",
        "class": "AdmissionBillingTest",
        "file": "inpatient\\test_admission_billing.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionBillingTest.test_admission_debits_wallet_correctly",
        "type": "method",
        "class": "AdmissionBillingTest",
        "file": "inpatient\\test_admission_billing.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionBillingTest.test_admission_cost_increase_debits_more",
        "type": "method",
        "class": "AdmissionBillingTest",
        "file": "inpatient\\test_admission_billing.py",
        "line": 80,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionBillingTest.test_admission_cost_decrease_credits_back",
        "type": "method",
        "class": "AdmissionBillingTest",
        "file": "inpatient\\test_admission_billing.py",
        "line": 118,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionBillingTest.test_admission_no_cost_change_no_wallet_update",
        "type": "method",
        "class": "AdmissionBillingTest",
        "file": "inpatient\\test_admission_billing.py",
        "line": 160,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "inpatient\\test_admission_billing.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_debits_wallet_correctly",
        "type": "function",
        "file": "inpatient\\test_admission_billing.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_cost_increase_debits_more",
        "type": "function",
        "file": "inpatient\\test_admission_billing.py",
        "line": 80,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_cost_decrease_credits_back",
        "type": "function",
        "file": "inpatient\\test_admission_billing.py",
        "line": 118,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_no_cost_change_no_wallet_update",
        "type": "function",
        "file": "inpatient\\test_admission_billing.py",
        "line": 160,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionListViewTest.setUp",
        "type": "method",
        "class": "AdmissionListViewTest",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionListViewTest.test_admission_list_shows_only_admitted_by_default",
        "type": "method",
        "class": "AdmissionListViewTest",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 86,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionListViewTest.test_admission_list_shows_discharged_when_filtered",
        "type": "method",
        "class": "AdmissionListViewTest",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 92,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionListViewTest.test_admission_list_shows_all_when_no_status_filter_and_all_admissions_are_admitted",
        "type": "method",
        "class": "AdmissionListViewTest",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 98,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionListViewTest.test_admission_list_shows_all_when_no_status_filter_and_some_admissions_are_discharged",
        "type": "method",
        "class": "AdmissionListViewTest",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 128,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AdmissionListViewTest.test_admission_list_shows_all_statuses_when_status_filter_is_empty",
        "type": "method",
        "class": "AdmissionListViewTest",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 136,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_list_shows_only_admitted_by_default",
        "type": "function",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 86,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_list_shows_discharged_when_filtered",
        "type": "function",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 92,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_list_shows_all_when_no_status_filter_and_all_admissions_are_admitted",
        "type": "function",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 98,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_list_shows_all_when_no_status_filter_and_some_admissions_are_discharged",
        "type": "function",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 128,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_admission_list_shows_all_statuses_when_status_filter_is_empty",
        "type": "function",
        "file": "inpatient\\tests\\test_admission_list_view.py",
        "line": 136,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "other": [
      {
        "name": "InpatientConfig.ready",
        "type": "method",
        "class": "InpatientConfig",
        "file": "inpatient\\apps.py",
        "line": 8,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ready",
        "type": "function",
        "file": "inpatient\\apps.py",
        "line": 8,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "admission_status_badge",
        "type": "function",
        "file": "inpatient\\templatetags\\inpatient_tags.py",
        "line": 8,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for admission status\nUsage: {{ admission.status|admission_status_badge }}"
      },
      {
        "name": "bed_status_badge",
        "type": "function",
        "file": "inpatient\\templatetags\\inpatient_tags.py",
        "line": 33,
        "args": [
          "bed"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for bed status\nUsage: {{ bed|bed_status_badge }}"
      },
      {
        "name": "ward_occupancy_percentage",
        "type": "function",
        "file": "inpatient\\templatetags\\inpatient_tags.py",
        "line": 46,
        "args": [
          "ward"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Calculate ward occupancy percentage\nUsage: {{ ward|ward_occupancy_percentage }}"
      },
      {
        "name": "ward_occupancy_class",
        "type": "function",
        "file": "inpatient\\templatetags\\inpatient_tags.py",
        "line": 58,
        "args": [
          "percentage"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return CSS class based on ward occupancy percentage\nUsage: {{ ward|ward_occupancy_percentage|ward_occupancy_class }}"
      },
      {
        "name": "admission_duration",
        "type": "function",
        "file": "inpatient\\templatetags\\inpatient_tags.py",
        "line": 71,
        "args": [
          "admission"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Calculate admission duration in days\nUsage: {{ admission|admission_duration }}"
      },
      {
        "name": "calculate_admission_cost",
        "type": "function",
        "file": "inpatient\\templatetags\\inpatient_tags.py",
        "line": 84,
        "args": [
          "admission"
        ],
        "decorators": [
          "register.simple_tag"
        ],
        "is_async": false,
        "docstring": "Calculate the total cost of an admission\nUsage: {% calculate_admission_cost admission %}"
      }
    ]
  },
  "hr": {
    "models": [
      {
        "name": "Designation.__str__",
        "type": "method",
        "class": "Designation",
        "file": "hr\\models.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Shift.__str__",
        "type": "method",
        "class": "Shift",
        "file": "hr\\models.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "StaffSchedule.__str__",
        "type": "method",
        "class": "StaffSchedule",
        "file": "hr\\models.py",
        "line": 52,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Leave.__str__",
        "type": "method",
        "class": "Leave",
        "file": "hr\\models.py",
        "line": 89,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Leave.get_duration",
        "type": "method",
        "class": "Leave",
        "file": "hr\\models.py",
        "line": 92,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Leave.get_leaves_by_staff",
        "type": "method",
        "class": "Leave",
        "file": "hr\\models.py",
        "line": 96,
        "args": [
          "staff",
          "year"
        ],
        "decorators": [
          "staticmethod"
        ],
        "is_async": false,
        "docstring": "Get total leaves taken by a staff member, optionally filtered by year"
      },
      {
        "name": "Attendance.__str__",
        "type": "method",
        "class": "Attendance",
        "file": "hr\\models.py",
        "line": 139,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Attendance.get_working_hours",
        "type": "method",
        "class": "Attendance",
        "file": "hr\\models.py",
        "line": 142,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate the working hours for this attendance record"
      },
      {
        "name": "Payroll.__str__",
        "type": "method",
        "class": "Payroll",
        "file": "hr\\models.py",
        "line": 185,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Payroll.save",
        "type": "method",
        "class": "Payroll",
        "file": "hr\\models.py",
        "line": 191,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "StaffProfile.__str__",
        "type": "method",
        "class": "StaffProfile",
        "file": "hr\\models.py",
        "line": 213,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "hr\\models.py",
        "line": 12,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "hr\\models.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "hr\\models.py",
        "line": 52,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "hr\\models.py",
        "line": 89,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_duration",
        "type": "function",
        "file": "hr\\models.py",
        "line": 92,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_leaves_by_staff",
        "type": "function",
        "file": "hr\\models.py",
        "line": 96,
        "args": [
          "staff",
          "year"
        ],
        "decorators": [
          "staticmethod"
        ],
        "is_async": false,
        "docstring": "Get total leaves taken by a staff member, optionally filtered by year"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "hr\\models.py",
        "line": 139,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_working_hours",
        "type": "function",
        "file": "hr\\models.py",
        "line": 142,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Calculate the working hours for this attendance record"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "hr\\models.py",
        "line": 185,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "hr\\models.py",
        "line": 191,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "hr\\models.py",
        "line": 213,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "user_management",
        "type": "function",
        "file": "hr\\views.py",
        "line": 18,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "User Management Page (formerly staff_list)"
      },
      {
        "name": "department_list",
        "type": "function",
        "file": "hr\\views.py",
        "line": 82,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all departments"
      },
      {
        "name": "add_department",
        "type": "function",
        "file": "hr\\views.py",
        "line": 107,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for adding a new department"
      },
      {
        "name": "edit_department",
        "type": "function",
        "file": "hr\\views.py",
        "line": 135,
        "args": [
          "request",
          "department_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a department"
      },
      {
        "name": "delete_department",
        "type": "function",
        "file": "hr\\views.py",
        "line": 163,
        "args": [
          "request",
          "department_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a department"
      },
      {
        "name": "schedule_list",
        "type": "function",
        "file": "hr\\views.py",
        "line": 192,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all staff schedules"
      },
      {
        "name": "create_schedule",
        "type": "function",
        "file": "hr\\views.py",
        "line": 218,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new staff schedule"
      },
      {
        "name": "edit_schedule",
        "type": "function",
        "file": "hr\\views.py",
        "line": 237,
        "args": [
          "request",
          "schedule_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing an existing staff schedule"
      },
      {
        "name": "delete_schedule",
        "type": "function",
        "file": "hr\\views.py",
        "line": 257,
        "args": [
          "request",
          "schedule_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting an existing staff schedule"
      },
      {
        "name": "leave_list",
        "type": "function",
        "file": "hr\\views.py",
        "line": 273,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all leave requests"
      },
      {
        "name": "request_leave",
        "type": "function",
        "file": "hr\\views.py",
        "line": 329,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for requesting a leave"
      },
      {
        "name": "approve_leave",
        "type": "function",
        "file": "hr\\views.py",
        "line": 352,
        "args": [
          "request",
          "leave_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for approving a leave request"
      },
      {
        "name": "reject_leave",
        "type": "function",
        "file": "hr\\views.py",
        "line": 382,
        "args": [
          "request",
          "leave_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for rejecting a leave request"
      },
      {
        "name": "hr_dashboard",
        "type": "function",
        "file": "hr\\views.py",
        "line": 413,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "attendance_list",
        "type": "function",
        "file": "hr\\views.py",
        "line": 456,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing attendance records"
      },
      {
        "name": "add_attendance",
        "type": "function",
        "file": "hr\\views.py",
        "line": 516,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for adding an attendance record"
      },
      {
        "name": "edit_attendance",
        "type": "function",
        "file": "hr\\views.py",
        "line": 541,
        "args": [
          "request",
          "attendance_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing an attendance record"
      },
      {
        "name": "delete_attendance",
        "type": "function",
        "file": "hr\\views.py",
        "line": 563,
        "args": [
          "request",
          "attendance_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting an attendance record"
      },
      {
        "name": "payroll_list",
        "type": "function",
        "file": "hr\\views.py",
        "line": 582,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing payroll records"
      },
      {
        "name": "add_payroll",
        "type": "function",
        "file": "hr\\views.py",
        "line": 641,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for adding a payroll record"
      },
      {
        "name": "edit_payroll",
        "type": "function",
        "file": "hr\\views.py",
        "line": 666,
        "args": [
          "request",
          "payroll_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a payroll record"
      },
      {
        "name": "delete_payroll",
        "type": "function",
        "file": "hr\\views.py",
        "line": 692,
        "args": [
          "request",
          "payroll_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a payroll record"
      }
    ],
    "forms": [
      {
        "name": "ShiftForm.clean",
        "type": "method",
        "class": "ShiftForm",
        "file": "hr\\forms.py",
        "line": 29,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "StaffScheduleForm.__init__",
        "type": "method",
        "class": "StaffScheduleForm",
        "file": "hr\\forms.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "StaffScheduleForm.clean",
        "type": "method",
        "class": "StaffScheduleForm",
        "file": "hr\\forms.py",
        "line": 66,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LeaveForm.__init__",
        "type": "method",
        "class": "LeaveForm",
        "file": "hr\\forms.py",
        "line": 90,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LeaveForm.clean",
        "type": "method",
        "class": "LeaveForm",
        "file": "hr\\forms.py",
        "line": 102,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LeaveApprovalForm.__init__",
        "type": "method",
        "class": "LeaveApprovalForm",
        "file": "hr\\forms.py",
        "line": 139,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LeaveApprovalForm.clean",
        "type": "method",
        "class": "LeaveApprovalForm",
        "file": "hr\\forms.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AttendanceForm.__init__",
        "type": "method",
        "class": "AttendanceForm",
        "file": "hr\\forms.py",
        "line": 171,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "AttendanceForm.clean",
        "type": "method",
        "class": "AttendanceForm",
        "file": "hr\\forms.py",
        "line": 181,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PayrollForm.__init__",
        "type": "method",
        "class": "PayrollForm",
        "file": "hr\\forms.py",
        "line": 238,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PayrollForm.clean",
        "type": "method",
        "class": "PayrollForm",
        "file": "hr\\forms.py",
        "line": 265,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 29,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 66,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 90,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 102,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 139,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 171,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 181,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 238,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "hr\\forms.py",
        "line": 265,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "leave_status_badge",
        "type": "function",
        "file": "hr\\templatetags\\hr_tags.py",
        "line": 8,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for leave status\nUsage: {{ leave.status|leave_status_badge }}"
      },
      {
        "name": "attendance_status_badge",
        "type": "function",
        "file": "hr\\templatetags\\hr_tags.py",
        "line": 33,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for attendance status\nUsage: {{ attendance.status|attendance_status_badge }}"
      },
      {
        "name": "payroll_status_badge",
        "type": "function",
        "file": "hr\\templatetags\\hr_tags.py",
        "line": 60,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for payroll status\nUsage: {{ payroll.status|payroll_status_badge }}"
      },
      {
        "name": "format_shift_time",
        "type": "function",
        "file": "hr\\templatetags\\hr_tags.py",
        "line": 83,
        "args": [
          "shift"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Format shift times\nUsage: {{ shift|format_shift_time }}"
      },
      {
        "name": "leave_duration",
        "type": "function",
        "file": "hr\\templatetags\\hr_tags.py",
        "line": 96,
        "args": [
          "leave"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Calculate leave duration in days\nUsage: {{ leave|leave_duration }}"
      },
      {
        "name": "get_attendance_count",
        "type": "function",
        "file": "hr\\templatetags\\hr_tags.py",
        "line": 108,
        "args": [
          "user",
          "status",
          "month",
          "year"
        ],
        "decorators": [
          "register.simple_tag"
        ],
        "is_async": false,
        "docstring": "Get attendance count for a user by status\nUsage: {% get_attendance_count user 'present' month year %}"
      }
    ]
  },
  "consultations": {
    "models": [
      {
        "name": "ConsultingRoom.__str__",
        "type": "method",
        "class": "ConsultingRoom",
        "file": "consultations\\models.py",
        "line": 18,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WaitingList.__str__",
        "type": "method",
        "class": "WaitingList",
        "file": "consultations\\models.py",
        "line": 49,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Consultation.__str__",
        "type": "method",
        "class": "Consultation",
        "file": "consultations\\models.py",
        "line": 80,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ConsultationNote.__str__",
        "type": "method",
        "class": "ConsultationNote",
        "file": "consultations\\models.py",
        "line": 93,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Referral.__str__",
        "type": "method",
        "class": "Referral",
        "file": "consultations\\models.py",
        "line": 119,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SOAPNote.__str__",
        "type": "method",
        "class": "SOAPNote",
        "file": "consultations\\models.py",
        "line": 143,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "consultations\\models.py",
        "line": 18,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "consultations\\models.py",
        "line": 49,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "consultations\\models.py",
        "line": 80,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "consultations\\models.py",
        "line": 93,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "consultations\\models.py",
        "line": 119,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "consultations\\models.py",
        "line": 143,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "consultation_payment",
        "type": "function",
        "file": "consultations\\payment_views.py",
        "line": 17,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "require_http_methods"
        ],
        "is_async": false,
        "docstring": "Handle consultation payment processing with dual payment methods"
      },
      {
        "name": "consultation_payment_history",
        "type": "function",
        "file": "consultations\\payment_views.py",
        "line": 105,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View payment history for a consultation"
      },
      {
        "name": "get_wallet_balance",
        "type": "function",
        "file": "consultations\\payment_views.py",
        "line": 130,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "AJAX endpoint to get patient wallet balance"
      },
      {
        "name": "doctor_dashboard",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 29,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "Dashboard view for doctors showing assigned patients with vitals"
      },
      {
        "name": "patient_list",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 83,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to see their patients"
      },
      {
        "name": "patient_detail",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 118,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to see patient details and vitals"
      },
      {
        "name": "create_consultation",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 149,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new consultation"
      },
      {
        "name": "consultation_detail",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 212,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for displaying consultation details"
      },
      {
        "name": "edit_consultation",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 301,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for editing a consultation"
      },
      {
        "name": "consultation_list",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 339,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for listing all consultations for a doctor"
      },
      {
        "name": "referral_list",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 395,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for listing all referrals for a doctor"
      },
      {
        "name": "create_referral",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 430,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new referral directly from the patient detail page"
      },
      {
        "name": "update_referral_status",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 490,
        "args": [
          "request",
          "referral_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for updating referral status"
      },
      {
        "name": "consulting_room_list",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 512,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all consulting rooms"
      },
      {
        "name": "create_consulting_room",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 551,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new consulting room"
      },
      {
        "name": "edit_consulting_room",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 570,
        "args": [
          "request",
          "room_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a consulting room"
      },
      {
        "name": "delete_consulting_room",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 592,
        "args": [
          "request",
          "room_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a consulting room"
      },
      {
        "name": "waiting_list",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 614,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "receptionist_required"
        ],
        "is_async": false,
        "docstring": "View for displaying the patient waiting list"
      },
      {
        "name": "add_to_waiting_list",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 662,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required",
          "receptionist_required"
        ],
        "is_async": false,
        "docstring": "View for adding a patient to the waiting list"
      },
      {
        "name": "update_waiting_status",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 693,
        "args": [
          "request",
          "entry_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for updating waiting list entry status"
      },
      {
        "name": "doctor_waiting_list",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 734,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to see their waiting patients"
      },
      {
        "name": "start_consultation",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 765,
        "args": [
          "request",
          "entry_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for starting a consultation from the waiting list"
      },
      {
        "name": "doctor_consultation",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 799,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for doctors to conduct consultations"
      },
      {
        "name": "create_prescription",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 869,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for creating a prescription from a consultation"
      },
      {
        "name": "create_lab_request",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 888,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for creating a lab test request from a consultation"
      },
      {
        "name": "create_radiology_order",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 907,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for creating a radiology order from a consultation"
      },
      {
        "name": "create_referral_from_consultation",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 927,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for creating a referral from a consultation"
      },
      {
        "name": "add_soap_note",
        "type": "function",
        "file": "consultations\\views.py",
        "line": 954,
        "args": [
          "request",
          "consultation_id"
        ],
        "decorators": [
          "login_required",
          "doctor_required"
        ],
        "is_async": false,
        "docstring": "View for adding a SOAP note to a consultation"
      }
    ],
    "forms": [
      {
        "name": "get_active_consulting_rooms",
        "type": "function",
        "file": "consultations\\forms.py",
        "line": 10,
        "args": [],
        "decorators": [],
        "is_async": false,
        "docstring": "Utility to get all active consulting rooms as choices for forms or views."
      },
      {
        "name": "ConsultationForm.__init__",
        "type": "method",
        "class": "ConsultationForm",
        "file": "consultations\\forms.py",
        "line": 50,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ReferralForm.__init__",
        "type": "method",
        "class": "ReferralForm",
        "file": "consultations\\forms.py",
        "line": 98,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "VitalsSelectionForm.__init__",
        "type": "method",
        "class": "VitalsSelectionForm",
        "file": "consultations\\forms.py",
        "line": 114,
        "args": [
          "self",
          "patient"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "WaitingListForm.__init__",
        "type": "method",
        "class": "WaitingListForm",
        "file": "consultations\\forms.py",
        "line": 178,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "consultations\\forms.py",
        "line": 50,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "consultations\\forms.py",
        "line": 98,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "consultations\\forms.py",
        "line": 114,
        "args": [
          "self",
          "patient"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "consultations\\forms.py",
        "line": 178,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ConsultationPaymentForm.__init__",
        "type": "method",
        "class": "ConsultationPaymentForm",
        "file": "consultations\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ConsultationPaymentForm.clean",
        "type": "method",
        "class": "ConsultationPaymentForm",
        "file": "consultations\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ConsultationPaymentForm.save",
        "type": "method",
        "class": "ConsultationPaymentForm",
        "file": "consultations\\payment_forms.py",
        "line": 91,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "consultations\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "consultations\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "consultations\\payment_forms.py",
        "line": 91,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "priority_color",
        "type": "function",
        "file": "consultations\\templatetags\\consultation_tags.py",
        "line": 6,
        "args": [
          "priority"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Map priority value to a Bootstrap color name (or similar).\nExample: 'high' -> 'danger', 'medium' -> 'warning', 'low' -> 'success'"
      }
    ]
  },
  "radiology": {
    "models": [
      {
        "name": "RadiologyCategory.__str__",
        "type": "method",
        "class": "RadiologyCategory",
        "file": "radiology\\models.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RadiologyTest.__str__",
        "type": "method",
        "class": "RadiologyTest",
        "file": "radiology\\models.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RadiologyOrder.__str__",
        "type": "method",
        "class": "RadiologyOrder",
        "file": "radiology\\models.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RadiologyResult.__str__",
        "type": "method",
        "class": "RadiologyResult",
        "file": "radiology\\models.py",
        "line": 95,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "radiology\\models.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "radiology\\models.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "radiology\\models.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "radiology\\models.py",
        "line": 95,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "radiology_payment",
        "type": "function",
        "file": "radiology\\payment_views.py",
        "line": 17,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required",
          "require_http_methods"
        ],
        "is_async": false,
        "docstring": "Handle radiology test payment processing with dual payment methods"
      },
      {
        "name": "radiology_payment_history",
        "type": "function",
        "file": "radiology\\payment_views.py",
        "line": 97,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View payment history for a radiology order"
      },
      {
        "name": "confirm_radiology_payment",
        "type": "function",
        "file": "radiology\\payment_views.py",
        "line": 118,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Confirm radiology payment and update order status"
      },
      {
        "name": "index",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 12,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Radiology dashboard view"
      },
      {
        "name": "order_radiology",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 41,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View to create a new radiology order"
      },
      {
        "name": "order_detail",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 73,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View to show radiology order details"
      },
      {
        "name": "edit_order",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 94,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "schedule_order",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 108,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required",
          "require_POST"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "mark_completed",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 118,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required",
          "require_POST"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "cancel_order",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 128,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required",
          "require_POST"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_result",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 136,
        "args": [
          "request",
          "order_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "radiology_sales_report",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 156,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for daily radiology tests by technician and total monthly radiology revenue."
      },
      {
        "name": "patient_radiology_results",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 192,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View all radiology results for a given patient."
      },
      {
        "name": "radiology_statistics_report",
        "type": "function",
        "file": "radiology\\views.py",
        "line": 210,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Comprehensive radiology statistics and reporting"
      }
    ],
    "forms": [
      {
        "name": "RadiologyOrderForm.__init__",
        "type": "method",
        "class": "RadiologyOrderForm",
        "file": "radiology\\forms.py",
        "line": 7,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "radiology\\forms.py",
        "line": 7,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RadiologyPaymentForm.__init__",
        "type": "method",
        "class": "RadiologyPaymentForm",
        "file": "radiology\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RadiologyPaymentForm.clean",
        "type": "method",
        "class": "RadiologyPaymentForm",
        "file": "radiology\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RadiologyPaymentForm.save",
        "type": "method",
        "class": "RadiologyPaymentForm",
        "file": "radiology\\payment_forms.py",
        "line": 91,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "radiology\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "radiology\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "radiology\\payment_forms.py",
        "line": 91,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "radiology\\management\\commands\\populate_radiology_tests.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "radiology\\management\\commands\\populate_radiology_tests.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "radiology_status_badge",
        "type": "function",
        "file": "radiology\\templatetags\\radiology_tags.py",
        "line": 7,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for radiology order status\nUsage: {{ order.status|radiology_status_badge }}"
      },
      {
        "name": "priority_badge",
        "type": "function",
        "file": "radiology\\templatetags\\radiology_tags.py",
        "line": 32,
        "args": [
          "priority"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for priority\nUsage: {{ order.priority|priority_badge }}"
      },
      {
        "name": "result_status_badge",
        "type": "function",
        "file": "radiology\\templatetags\\radiology_tags.py",
        "line": 49,
        "args": [
          "is_abnormal"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for radiology result status\nUsage: {{ result.is_abnormal|result_status_badge }}"
      }
    ]
  },
  "theatre": {
    "models": [
      {
        "name": "OperationTheatre.__str__",
        "type": "method",
        "class": "OperationTheatre",
        "file": "theatre\\models.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryType.__str__",
        "type": "method",
        "class": "SurgeryType",
        "file": "theatre\\models.py",
        "line": 47,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Surgery.__str__",
        "type": "method",
        "class": "Surgery",
        "file": "theatre\\models.py",
        "line": 92,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgicalTeam.__str__",
        "type": "method",
        "class": "SurgicalTeam",
        "file": "theatre\\models.py",
        "line": 118,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgicalEquipment.__str__",
        "type": "method",
        "class": "SurgicalEquipment",
        "file": "theatre\\models.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EquipmentUsage.__str__",
        "type": "method",
        "class": "EquipmentUsage",
        "file": "theatre\\models.py",
        "line": 165,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgerySchedule.__str__",
        "type": "method",
        "class": "SurgerySchedule",
        "file": "theatre\\models.py",
        "line": 191,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNote.__str__",
        "type": "method",
        "class": "PostOperativeNote",
        "file": "theatre\\models.py",
        "line": 210,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PreOperativeChecklist.__str__",
        "type": "method",
        "class": "PreOperativeChecklist",
        "file": "theatre\\models.py",
        "line": 233,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryLog.__str__",
        "type": "method",
        "class": "SurgeryLog",
        "file": "theatre\\models.py",
        "line": 247,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 47,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 92,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 118,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 165,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 191,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 210,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 233,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "theatre\\models.py",
        "line": 247,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "theatre_payment",
        "type": "function",
        "file": "theatre\\payment_views.py",
        "line": 17,
        "args": [
          "request",
          "surgery_id"
        ],
        "decorators": [
          "login_required",
          "require_http_methods"
        ],
        "is_async": false,
        "docstring": "Handle theatre service payment processing with dual payment methods"
      },
      {
        "name": "theatre_payment_history",
        "type": "function",
        "file": "theatre\\payment_views.py",
        "line": 109,
        "args": [
          "request",
          "surgery_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View payment history for a theatre service"
      },
      {
        "name": "confirm_theatre_payment",
        "type": "function",
        "file": "theatre\\payment_views.py",
        "line": 134,
        "args": [
          "request",
          "surgery_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Confirm theatre payment and update surgery status"
      },
      {
        "name": "OperationTheatreDetailView.get_context_data",
        "type": "method",
        "class": "OperationTheatreDetailView",
        "file": "theatre\\views.py",
        "line": 47,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryListView.get_queryset",
        "type": "method",
        "class": "SurgeryListView",
        "file": "theatre\\views.py",
        "line": 107,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryListView.get_context_data",
        "type": "method",
        "class": "SurgeryListView",
        "file": "theatre\\views.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryDetailView.get_context_data",
        "type": "method",
        "class": "SurgeryDetailView",
        "file": "theatre\\views.py",
        "line": 132,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryDetailView.post",
        "type": "method",
        "class": "SurgeryDetailView",
        "file": "theatre\\views.py",
        "line": 147,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PreOperativeChecklistCreateView.form_valid",
        "type": "method",
        "class": "PreOperativeChecklistCreateView",
        "file": "theatre\\views.py",
        "line": 171,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PreOperativeChecklistCreateView.get_success_url",
        "type": "method",
        "class": "PreOperativeChecklistCreateView",
        "file": "theatre\\views.py",
        "line": 178,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryLogListView.get_queryset",
        "type": "method",
        "class": "SurgeryLogListView",
        "file": "theatre\\views.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryLogListView.get_context_data",
        "type": "method",
        "class": "SurgeryLogListView",
        "file": "theatre\\views.py",
        "line": 190,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryCreateView.get_context_data",
        "type": "method",
        "class": "SurgeryCreateView",
        "file": "theatre\\views.py",
        "line": 201,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryCreateView.post",
        "type": "method",
        "class": "SurgeryCreateView",
        "file": "theatre\\views.py",
        "line": 215,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryCreateView.form_valid",
        "type": "method",
        "class": "SurgeryCreateView",
        "file": "theatre\\views.py",
        "line": 225,
        "args": [
          "self",
          "form",
          "team_formset",
          "equipment_formset"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryCreateView.form_invalid",
        "type": "method",
        "class": "SurgeryCreateView",
        "file": "theatre\\views.py",
        "line": 235,
        "args": [
          "self",
          "form",
          "team_formset",
          "equipment_formset"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgicalTeamListView.get_queryset",
        "type": "method",
        "class": "SurgicalTeamListView",
        "file": "theatre\\views.py",
        "line": 292,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgicalTeamListView.get_context_data",
        "type": "method",
        "class": "SurgicalTeamListView",
        "file": "theatre\\views.py",
        "line": 308,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgicalTeamCreateView.form_valid",
        "type": "method",
        "class": "SurgicalTeamCreateView",
        "file": "theatre\\views.py",
        "line": 325,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgicalTeamUpdateView.form_valid",
        "type": "method",
        "class": "SurgicalTeamUpdateView",
        "file": "theatre\\views.py",
        "line": 336,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgicalTeamDeleteView.delete",
        "type": "method",
        "class": "SurgicalTeamDeleteView",
        "file": "theatre\\views.py",
        "line": 346,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TheatreDashboardView.get_context_data",
        "type": "method",
        "class": "TheatreDashboardView",
        "file": "theatre\\views.py",
        "line": 354,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "EquipmentMaintenanceView.get_queryset",
        "type": "method",
        "class": "EquipmentMaintenanceView",
        "file": "theatre\\views.py",
        "line": 395,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryReportView.get_context_data",
        "type": "method",
        "class": "SurgeryReportView",
        "file": "theatre\\views.py",
        "line": 409,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "theatre_statistics_report",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 428,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Comprehensive theatre statistics and reporting"
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 47,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 107,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 132,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "post",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 147,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "form_valid",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 171,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_success_url",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 178,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 190,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 201,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "post",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 215,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "form_valid",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 225,
        "args": [
          "self",
          "form",
          "team_formset",
          "equipment_formset"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "form_invalid",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 235,
        "args": [
          "self",
          "form",
          "team_formset",
          "equipment_formset"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 292,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 308,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "form_valid",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 325,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "form_valid",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 336,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "delete",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 346,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 354,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_queryset",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 395,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views.py",
        "line": 409,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNoteCreateView.get_context_data",
        "type": "method",
        "class": "PostOperativeNoteCreateView",
        "file": "theatre\\views_post_op.py",
        "line": 14,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNoteCreateView.form_valid",
        "type": "method",
        "class": "PostOperativeNoteCreateView",
        "file": "theatre\\views_post_op.py",
        "line": 19,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNoteCreateView.get_success_url",
        "type": "method",
        "class": "PostOperativeNoteCreateView",
        "file": "theatre\\views_post_op.py",
        "line": 25,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNoteUpdateView.get_context_data",
        "type": "method",
        "class": "PostOperativeNoteUpdateView",
        "file": "theatre\\views_post_op.py",
        "line": 33,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNoteUpdateView.form_valid",
        "type": "method",
        "class": "PostOperativeNoteUpdateView",
        "file": "theatre\\views_post_op.py",
        "line": 38,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNoteUpdateView.get_success_url",
        "type": "method",
        "class": "PostOperativeNoteUpdateView",
        "file": "theatre\\views_post_op.py",
        "line": 42,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNoteDeleteView.get_context_data",
        "type": "method",
        "class": "PostOperativeNoteDeleteView",
        "file": "theatre\\views_post_op.py",
        "line": 49,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PostOperativeNoteDeleteView.get_success_url",
        "type": "method",
        "class": "PostOperativeNoteDeleteView",
        "file": "theatre\\views_post_op.py",
        "line": 54,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views_post_op.py",
        "line": 14,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "form_valid",
        "type": "function",
        "file": "theatre\\views_post_op.py",
        "line": 19,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_success_url",
        "type": "function",
        "file": "theatre\\views_post_op.py",
        "line": 25,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views_post_op.py",
        "line": 33,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "form_valid",
        "type": "function",
        "file": "theatre\\views_post_op.py",
        "line": 38,
        "args": [
          "self",
          "form"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_success_url",
        "type": "function",
        "file": "theatre\\views_post_op.py",
        "line": 42,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_context_data",
        "type": "function",
        "file": "theatre\\views_post_op.py",
        "line": 49,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_success_url",
        "type": "function",
        "file": "theatre\\views_post_op.py",
        "line": 54,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "forms": [
      {
        "name": "SurgeryForm.__init__",
        "type": "method",
        "class": "SurgeryForm",
        "file": "theatre\\forms.py",
        "line": 86,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "SurgeryForm.clean",
        "type": "method",
        "class": "SurgeryForm",
        "file": "theatre\\forms.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "theatre\\forms.py",
        "line": 86,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "theatre\\forms.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TheatrePaymentForm.__init__",
        "type": "method",
        "class": "TheatrePaymentForm",
        "file": "theatre\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TheatrePaymentForm.clean",
        "type": "method",
        "class": "TheatrePaymentForm",
        "file": "theatre\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "TheatrePaymentForm.save",
        "type": "method",
        "class": "TheatrePaymentForm",
        "file": "theatre\\payment_forms.py",
        "line": 91,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "theatre\\payment_forms.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "theatre\\payment_forms.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "theatre\\payment_forms.py",
        "line": 91,
        "args": [
          "self",
          "commit"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [
      {
        "name": "create_surgery_schedule",
        "type": "function",
        "file": "theatre\\signals.py",
        "line": 6,
        "args": [
          "sender",
          "instance",
          "created"
        ],
        "decorators": [
          "receiver"
        ],
        "is_async": false,
        "docstring": "Create a surgery schedule when a new surgery is created."
      },
      {
        "name": "update_theatre_availability",
        "type": "function",
        "file": "theatre\\signals.py",
        "line": 15,
        "args": [
          "sender",
          "instance"
        ],
        "decorators": [
          "receiver"
        ],
        "is_async": false,
        "docstring": "Update theatre availability when surgery status changes."
      }
    ],
    "management_commands": [
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "theatre\\management\\commands\\populate_theatre_data.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "theatre\\management\\commands\\populate_theatre_data.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "TheatreConfig.ready",
        "type": "method",
        "class": "TheatreConfig",
        "file": "theatre\\apps.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ready",
        "type": "function",
        "file": "theatre\\apps.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ]
  },
  "nhia": {
    "models": [
      {
        "name": "NHIAPatient.__str__",
        "type": "method",
        "class": "NHIAPatient",
        "file": "nhia\\models.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "nhia\\models.py",
        "line": 10,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "nhia_patient_list",
        "type": "function",
        "file": "nhia\\views.py",
        "line": 12,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "register_patient_for_nhia",
        "type": "function",
        "file": "nhia\\views.py",
        "line": 36,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "register_independent_nhia_patient",
        "type": "function",
        "file": "nhia\\views.py",
        "line": 65,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      }
    ],
    "forms": [],
    "admin": [
      {
        "name": "NHIAPatientAdmin.patient_full_name",
        "type": "method",
        "class": "NHIAPatientAdmin",
        "file": "nhia\\admin.py",
        "line": 11,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "patient_full_name",
        "type": "function",
        "file": "nhia\\admin.py",
        "line": 11,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "urls": [],
    "utils": [
      {
        "name": "generate_nhia_reg_number",
        "type": "function",
        "file": "nhia\\utils.py",
        "line": 3,
        "args": [],
        "decorators": [],
        "is_async": false,
        "docstring": "Generate a unique NHIA registration number."
      },
      {
        "name": "get_next_serial",
        "type": "function",
        "file": "nhia\\utils.py",
        "line": 8,
        "args": [],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [
      {
        "name": "NHIARegistrationTest.setUp",
        "type": "method",
        "class": "NHIARegistrationTest",
        "file": "nhia\\tests.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NHIARegistrationTest.test_nhia_reg_number_auto_generation",
        "type": "method",
        "class": "NHIARegistrationTest",
        "file": "nhia\\tests.py",
        "line": 30,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "NHIARegistrationTest.test_nhia_reg_number_uniqueness",
        "type": "method",
        "class": "NHIARegistrationTest",
        "file": "nhia\\tests.py",
        "line": 59,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "nhia\\tests.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_nhia_reg_number_auto_generation",
        "type": "function",
        "file": "nhia\\tests.py",
        "line": 30,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_nhia_reg_number_uniqueness",
        "type": "function",
        "file": "nhia\\tests.py",
        "line": 59,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "other": []
  },
  "retainership": {
    "models": [
      {
        "name": "RetainershipPatient.__str__",
        "type": "method",
        "class": "RetainershipPatient",
        "file": "retainership\\models.py",
        "line": 18,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "retainership\\models.py",
        "line": 18,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "retainership_patient_list",
        "type": "function",
        "file": "retainership\\views.py",
        "line": 12,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "select_patient_for_retainership",
        "type": "function",
        "file": "retainership\\views.py",
        "line": 38,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "register_patient_for_retainership",
        "type": "function",
        "file": "retainership\\views.py",
        "line": 67,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "register_independent_retainership_patient",
        "type": "function",
        "file": "retainership\\views.py",
        "line": 89,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      }
    ],
    "forms": [],
    "admin": [
      {
        "name": "RetainershipPatientAdmin.patient_full_name",
        "type": "method",
        "class": "RetainershipPatientAdmin",
        "file": "retainership\\admin.py",
        "line": 11,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "patient_full_name",
        "type": "function",
        "file": "retainership\\admin.py",
        "line": 11,
        "args": [
          "self",
          "obj"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "urls": [],
    "utils": [
      {
        "name": "generate_retainership_reg_number",
        "type": "function",
        "file": "retainership\\utils.py",
        "line": 3,
        "args": [],
        "decorators": [],
        "is_async": false,
        "docstring": "Generate a unique 10-digit retainership registration number starting with 3."
      }
    ],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [
      {
        "name": "RetainershipRegistrationTest.setUp",
        "type": "method",
        "class": "RetainershipRegistrationTest",
        "file": "retainership\\tests.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RetainershipRegistrationTest.test_retainership_reg_number_auto_generation",
        "type": "method",
        "class": "RetainershipRegistrationTest",
        "file": "retainership\\tests.py",
        "line": 30,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RetainershipRegistrationTest.test_retainership_reg_number_uniqueness",
        "type": "method",
        "class": "RetainershipRegistrationTest",
        "file": "retainership\\tests.py",
        "line": 52,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "retainership\\tests.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_retainership_reg_number_auto_generation",
        "type": "function",
        "file": "retainership\\tests.py",
        "line": 30,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_retainership_reg_number_uniqueness",
        "type": "function",
        "file": "retainership\\tests.py",
        "line": 52,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "other": []
  },
  "reporting": {
    "models": [
      {
        "name": "Report.__str__",
        "type": "method",
        "class": "Report",
        "file": "reporting\\models.py",
        "line": 23,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "ReportExecution.__str__",
        "type": "method",
        "class": "ReportExecution",
        "file": "reporting\\models.py",
        "line": 35,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Dashboard.__str__",
        "type": "method",
        "class": "Dashboard",
        "file": "reporting\\models.py",
        "line": 50,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DashboardWidget.__str__",
        "type": "method",
        "class": "DashboardWidget",
        "file": "reporting\\models.py",
        "line": 77,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "reporting\\models.py",
        "line": 23,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "reporting\\models.py",
        "line": 35,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "reporting\\models.py",
        "line": 50,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "reporting\\models.py",
        "line": 77,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [
      {
        "name": "execute_report",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 38,
        "args": [
          "report",
          "parameters_json"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Execute a report and return the results"
      },
      {
        "name": "generate_chart",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 103,
        "args": [
          "result",
          "chart_type"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Generate a chart from report results"
      },
      {
        "name": "dashboard",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 171,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Fully functional reporting dashboard with widgets, analytics, and audit logs."
      },
      {
        "name": "patient_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 242,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "appointment_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 266,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "billing_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 292,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "pharmacy_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 318,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Alias for pharmacy_sales_report for URL compatibility"
      },
      {
        "name": "pharmacy_sales_report",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 323,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "laboratory_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 347,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "radiology_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 373,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "inpatient_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 399,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "staff_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 423,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Alias for hr_reports for URL compatibility"
      },
      {
        "name": "hr_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 428,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "financial_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 450,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "export_csv",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 492,
        "args": [
          "request",
          "report_type"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "export_pdf",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 499,
        "args": [
          "request",
          "report_type"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "report_list",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 506,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all reports"
      },
      {
        "name": "create_report",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 568,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new report"
      },
      {
        "name": "view_report",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 589,
        "args": [
          "request",
          "report_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for viewing a report and its results"
      },
      {
        "name": "edit_report",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 644,
        "args": [
          "request",
          "report_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a report"
      },
      {
        "name": "delete_report",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 671,
        "args": [
          "request",
          "report_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a report"
      },
      {
        "name": "dashboard_list",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 694,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing all dashboards"
      },
      {
        "name": "create_dashboard",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 754,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for creating a new dashboard"
      },
      {
        "name": "edit_dashboard",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 780,
        "args": [
          "request",
          "dashboard_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a dashboard"
      },
      {
        "name": "delete_dashboard",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 811,
        "args": [
          "request",
          "dashboard_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a dashboard"
      },
      {
        "name": "add_widget",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 834,
        "args": [
          "request",
          "dashboard_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for adding a widget to a dashboard"
      },
      {
        "name": "edit_widget",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 876,
        "args": [
          "request",
          "widget_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for editing a dashboard widget"
      },
      {
        "name": "delete_widget",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 909,
        "args": [
          "request",
          "widget_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for deleting a dashboard widget"
      },
      {
        "name": "export_patient_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 934,
        "args": [
          "request",
          "format"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for exporting patient reports (CSV/PDF)"
      },
      {
        "name": "export_appointment_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 940,
        "args": [
          "request",
          "format"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for exporting appointment reports (CSV/PDF)"
      },
      {
        "name": "export_billing_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 946,
        "args": [
          "request",
          "format"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for exporting billing/financial reports (CSV/PDF)"
      },
      {
        "name": "export_pharmacy_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 952,
        "args": [
          "request",
          "format"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for exporting pharmacy reports (CSV/PDF)"
      },
      {
        "name": "export_laboratory_reports",
        "type": "function",
        "file": "reporting\\views.py",
        "line": 958,
        "args": [
          "request",
          "format"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Stub for exporting laboratory/clinical reports (CSV/PDF)"
      }
    ],
    "forms": [
      {
        "name": "ReportExecutionForm.__init__",
        "type": "method",
        "class": "ReportExecutionForm",
        "file": "reporting\\forms.py",
        "line": 99,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DashboardWidgetForm.__init__",
        "type": "method",
        "class": "DashboardWidgetForm",
        "file": "reporting\\forms.py",
        "line": 138,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "DashboardWidgetForm.clean",
        "type": "method",
        "class": "DashboardWidgetForm",
        "file": "reporting\\forms.py",
        "line": 146,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "reporting\\forms.py",
        "line": 99,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "reporting\\forms.py",
        "line": 138,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "clean",
        "type": "function",
        "file": "reporting\\forms.py",
        "line": 146,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "report_status_badge",
        "type": "function",
        "file": "reporting\\templatetags\\reporting_tags.py",
        "line": 8,
        "args": [
          "status"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a Bootstrap badge for report execution status\nUsage: {{ execution.status|report_status_badge }}"
      },
      {
        "name": "format_execution_time",
        "type": "function",
        "file": "reporting\\templatetags\\reporting_tags.py",
        "line": 31,
        "args": [
          "seconds"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Format execution time in seconds to a human-readable format\nUsage: {{ execution.execution_time|format_execution_time }}"
      },
      {
        "name": "json_to_html",
        "type": "function",
        "file": "reporting\\templatetags\\reporting_tags.py",
        "line": 51,
        "args": [
          "json_data"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Convert JSON data to HTML representation\nUsage: {{ execution.parameters_used|json_to_html }}"
      },
      {
        "name": "chart_data_to_json",
        "type": "function",
        "file": "reporting\\templatetags\\reporting_tags.py",
        "line": 77,
        "args": [
          "data"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Convert chart data to JSON for use in JavaScript\nUsage: {{ widget.get_content|chart_data_to_json }}"
      },
      {
        "name": "get_widget_template",
        "type": "function",
        "file": "reporting\\templatetags\\reporting_tags.py",
        "line": 94,
        "args": [
          "widget_type"
        ],
        "decorators": [
          "register.simple_tag"
        ],
        "is_async": false,
        "docstring": "Return the appropriate template for a widget type\nUsage: {% get_widget_template widget.widget_type %}"
      }
    ]
  },
  "core": {
    "models": [
      {
        "name": "send_notification_email",
        "type": "function",
        "file": "core\\models.py",
        "line": 13,
        "args": [
          "subject",
          "message",
          "recipient_list"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Send an email notification to the specified recipients."
      },
      {
        "name": "send_notification_sms",
        "type": "function",
        "file": "core\\models.py",
        "line": 23,
        "args": [
          "phone_number",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Send an SMS notification to the specified phone number. Placeholder for SMS integration."
      }
    ],
    "views": [
      {
        "name": "comprehensive_transaction_history",
        "type": "function",
        "file": "core\\transaction_views.py",
        "line": 17,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Comprehensive view showing all monetary transactions for a patient or system-wide"
      },
      {
        "name": "patient_financial_summary",
        "type": "function",
        "file": "core\\transaction_views.py",
        "line": 177,
        "args": [
          "request",
          "patient_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Financial summary for a specific patient showing all monetary activities"
      },
      {
        "name": "home_view",
        "type": "function",
        "file": "core\\views.py",
        "line": 5,
        "args": [
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Custom home view that handles redirects based on authentication status.\nIf the user is authenticated, show the home page.\nIf not, show the home page with login button."
      },
      {
        "name": "notifications_list",
        "type": "function",
        "file": "core\\views.py",
        "line": 14,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View for listing internal notifications for the logged-in user"
      },
      {
        "name": "mark_notification_read",
        "type": "function",
        "file": "core\\views.py",
        "line": 23,
        "args": [
          "request",
          "notification_id"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Mark a notification as read"
      }
    ],
    "forms": [],
    "admin": [],
    "urls": [],
    "utils": [
      {
        "name": "log_audit_action",
        "type": "function",
        "file": "core\\audit_utils.py",
        "line": 5,
        "args": [
          "user",
          "action",
          "instance",
          "description"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "send_notification_email",
        "type": "function",
        "file": "core\\utils.py",
        "line": 4,
        "args": [
          "subject",
          "message",
          "recipient_list",
          "from_email"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "send_sms_notification",
        "type": "function",
        "file": "core\\utils.py",
        "line": 8,
        "args": [
          "phone_number",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "signals": [],
    "management_commands": [
      {
        "name": "Command.add_arguments",
        "type": "method",
        "class": "Command",
        "file": "core\\management\\commands\\backup_db.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Command.handle",
        "type": "method",
        "class": "Command",
        "file": "core\\management\\commands\\backup_db.py",
        "line": 18,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_arguments",
        "type": "function",
        "file": "core\\management\\commands\\backup_db.py",
        "line": 11,
        "args": [
          "self",
          "parser"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "handle",
        "type": "function",
        "file": "core\\management\\commands\\backup_db.py",
        "line": 18,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "role_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 6,
        "args": [
          "allowed_roles"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access based on user role.\nSuperusers have unrestricted access to all views.\n\nArgs:\n    allowed_roles: List of role names that are allowed to access the view\n\nUsage:\n    @role_required(['admin', 'doctor'])\n    def some_view(request):\n        ..."
      },
      {
        "name": "admin_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 43,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access to admin users only.\n\nUsage:\n    @admin_required\n    def admin_only_view(request):\n        ..."
      },
      {
        "name": "doctor_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 54,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access to doctors only.\n\nUsage:\n    @doctor_required\n    def doctor_only_view(request):\n        ..."
      },
      {
        "name": "pharmacist_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 65,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access to pharmacists only.\n\nUsage:\n    @pharmacist_required\n    def pharmacist_only_view(request):\n        ..."
      },
      {
        "name": "lab_technician_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 76,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access to lab technicians only.\n\nUsage:\n    @lab_technician_required\n    def lab_technician_only_view(request):\n        ..."
      },
      {
        "name": "nurse_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 87,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access to nurses only.\n\nUsage:\n    @nurse_required\n    def nurse_only_view(request):\n        ..."
      },
      {
        "name": "accountant_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 98,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access to accountants only.\n\nUsage:\n    @accountant_required\n    def accountant_only_view(request):\n        ..."
      },
      {
        "name": "receptionist_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 109,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access to receptionists only.\n\nUsage:\n    @receptionist_required\n    def receptionist_only_view(request):\n        ..."
      },
      {
        "name": "health_record_officer_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 120,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator to restrict view access to health record officers only.\n\nUsage:\n    @health_record_officer_required\n    def health_record_officer_only_view(request):\n        ..."
      },
      {
        "name": "api_role_required",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 131,
        "args": [
          "allowed_roles"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Decorator for API views to restrict access based on user role.\nReturns 403 Forbidden instead of redirecting.\n\nArgs:\n    allowed_roles: List of role names that are allowed to access the API\n\nUsage:\n    @api_role_required(['admin', 'doctor'])\n    def some_api_view(request):\n        ..."
      },
      {
        "name": "decorator",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 19,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "decorator",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 144,
        "args": [
          "view_func"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "_wrapped_view",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 21,
        "args": [
          "request"
        ],
        "decorators": [
          "wraps"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "_wrapped_view",
        "type": "function",
        "file": "core\\decorators.py",
        "line": 146,
        "args": [
          "request"
        ],
        "decorators": [
          "wraps"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "load_env_file",
        "type": "function",
        "file": "core\\env_loader.py",
        "line": 11,
        "args": [
          "env_file"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Load environment variables from a .env file.\n\nArgs:\n    env_file: Path to the .env file. If None, uses the default location.\n    \nReturns:\n    bool: True if the .env file was loaded successfully, False otherwise."
      },
      {
        "name": "LoginRequiredMiddleware.__init__",
        "type": "method",
        "class": "LoginRequiredMiddleware",
        "file": "core\\middleware.py",
        "line": 10,
        "args": [
          "self",
          "get_response"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "LoginRequiredMiddleware.__call__",
        "type": "method",
        "class": "LoginRequiredMiddleware",
        "file": "core\\middleware.py",
        "line": 28,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RoleBasedAccessMiddleware.__init__",
        "type": "method",
        "class": "RoleBasedAccessMiddleware",
        "file": "core\\middleware.py",
        "line": 54,
        "args": [
          "self",
          "get_response"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "RoleBasedAccessMiddleware.__call__",
        "type": "method",
        "class": "RoleBasedAccessMiddleware",
        "file": "core\\middleware.py",
        "line": 100,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "core\\middleware.py",
        "line": 10,
        "args": [
          "self",
          "get_response"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__call__",
        "type": "function",
        "file": "core\\middleware.py",
        "line": 28,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "core\\middleware.py",
        "line": 54,
        "args": [
          "self",
          "get_response"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__call__",
        "type": "function",
        "file": "core\\middleware.py",
        "line": 100,
        "args": [
          "self",
          "request"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add_class",
        "type": "function",
        "file": "core\\templatetags\\core_form_tags.py",
        "line": 6,
        "args": [
          "field",
          "css_class"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Add a CSS class to a Django form field\nUsage: {{ form.field|add_class:\"form-control\" }}"
      },
      {
        "name": "add_class",
        "type": "function",
        "file": "core\\templatetags\\core_tags.py",
        "line": 6,
        "args": [
          "field",
          "css_class"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Add a CSS class to a Django form field\nUsage: {{ form.field|add_class:\"form-control\" }}"
      }
    ]
  },
  "dashboard": {
    "models": [],
    "views": [
      {
        "name": "dashboard",
        "type": "function",
        "file": "dashboard\\views.py",
        "line": 19,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "Main dashboard view"
      },
      {
        "name": "system_overview",
        "type": "function",
        "file": "dashboard\\views.py",
        "line": 97,
        "args": [
          "request"
        ],
        "decorators": [
          "login_required"
        ],
        "is_async": false,
        "docstring": "View to display a system configuration and data overview."
      }
    ],
    "forms": [],
    "admin": [],
    "urls": [],
    "utils": [],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [],
    "other": [
      {
        "name": "trend_indicator",
        "type": "function",
        "file": "dashboard\\templatetags\\dashboard_tags.py",
        "line": 9,
        "args": [
          "value",
          "previous_value"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Return a trend indicator icon based on value comparison\nUsage: {{ current_value|trend_indicator:previous_value }}"
      },
      {
        "name": "percentage_change",
        "type": "function",
        "file": "dashboard\\templatetags\\dashboard_tags.py",
        "line": 31,
        "args": [
          "value",
          "previous_value"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Calculate percentage change between two values\nUsage: {{ current_value|percentage_change:previous_value }}"
      },
      {
        "name": "format_large_number",
        "type": "function",
        "file": "dashboard\\templatetags\\dashboard_tags.py",
        "line": 52,
        "args": [
          "value"
        ],
        "decorators": [
          "register.filter"
        ],
        "is_async": false,
        "docstring": "Format large numbers with K, M, B suffixes\nUsage: {{ large_number|format_large_number }}"
      },
      {
        "name": "get_date_range",
        "type": "function",
        "file": "dashboard\\templatetags\\dashboard_tags.py",
        "line": 75,
        "args": [
          "period"
        ],
        "decorators": [
          "register.simple_tag"
        ],
        "is_async": false,
        "docstring": "Get start and end dates for a period\nUsage: {% get_date_range 'week' as dates %}"
      }
    ]
  },
  "pharmacy_billing": {
    "models": [
      {
        "name": "Invoice.save",
        "type": "method",
        "class": "Invoice",
        "file": "pharmacy_billing\\models.py",
        "line": 30,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "Invoice.get_balance",
        "type": "method",
        "class": "Invoice",
        "file": "pharmacy_billing\\models.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Return the remaining balance on this invoice"
      },
      {
        "name": "Invoice.is_paid",
        "type": "method",
        "class": "Invoice",
        "file": "pharmacy_billing\\models.py",
        "line": 38,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if the invoice is fully paid"
      },
      {
        "name": "Payment.__str__",
        "type": "method",
        "class": "Payment",
        "file": "pharmacy_billing\\models.py",
        "line": 65,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "InvoiceItem.total_price",
        "type": "method",
        "class": "InvoiceItem",
        "file": "pharmacy_billing\\models.py",
        "line": 77,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "save",
        "type": "function",
        "file": "pharmacy_billing\\models.py",
        "line": 30,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "get_balance",
        "type": "function",
        "file": "pharmacy_billing\\models.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Return the remaining balance on this invoice"
      },
      {
        "name": "is_paid",
        "type": "function",
        "file": "pharmacy_billing\\models.py",
        "line": 38,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": "Check if the invoice is fully paid"
      },
      {
        "name": "__str__",
        "type": "function",
        "file": "pharmacy_billing\\models.py",
        "line": 65,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "total_price",
        "type": "function",
        "file": "pharmacy_billing\\models.py",
        "line": 77,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": null
      }
    ],
    "views": [],
    "forms": [],
    "admin": [],
    "urls": [],
    "utils": [
      {
        "name": "create_pharmacy_invoice",
        "type": "function",
        "file": "pharmacy_billing\\utils.py",
        "line": 8,
        "args": [
          "request",
          "prescription",
          "subtotal_value"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      }
    ],
    "signals": [],
    "management_commands": [],
    "api": [],
    "tests": [
      {
        "name": "PharmacyBillingNHIATest.setUp",
        "type": "method",
        "class": "PharmacyBillingNHIATest",
        "file": "pharmacy_billing\\tests.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "PharmacyBillingNHIATest.test_nhia_patient_10_percent_payment",
        "type": "method",
        "class": "PharmacyBillingNHIATest",
        "file": "pharmacy_billing\\tests.py",
        "line": 55,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "setUp",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 11,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "test_nhia_patient_10_percent_payment",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 55,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MockMessages.__init__",
        "type": "method",
        "class": "MockMessages",
        "file": "pharmacy_billing\\tests.py",
        "line": 92,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MockMessages.add",
        "type": "method",
        "class": "MockMessages",
        "file": "pharmacy_billing\\tests.py",
        "line": 94,
        "args": [
          "self",
          "level",
          "message",
          "extra_tags"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MockMessages.info",
        "type": "method",
        "class": "MockMessages",
        "file": "pharmacy_billing\\tests.py",
        "line": 96,
        "args": [
          "self",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MockMessages.error",
        "type": "method",
        "class": "MockMessages",
        "file": "pharmacy_billing\\tests.py",
        "line": 98,
        "args": [
          "self",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MockMessages.success",
        "type": "method",
        "class": "MockMessages",
        "file": "pharmacy_billing\\tests.py",
        "line": 100,
        "args": [
          "self",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MockMessages.warning",
        "type": "method",
        "class": "MockMessages",
        "file": "pharmacy_billing\\tests.py",
        "line": 102,
        "args": [
          "self",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MockRequest.__init__",
        "type": "method",
        "class": "MockRequest",
        "file": "pharmacy_billing\\tests.py",
        "line": 106,
        "args": [
          "self",
          "user"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "MockRequest.messages",
        "type": "method",
        "class": "MockRequest",
        "file": "pharmacy_billing\\tests.py",
        "line": 113,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 92,
        "args": [
          "self"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "add",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 94,
        "args": [
          "self",
          "level",
          "message",
          "extra_tags"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "info",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 96,
        "args": [
          "self",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "error",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 98,
        "args": [
          "self",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "success",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 100,
        "args": [
          "self",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "warning",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 102,
        "args": [
          "self",
          "message"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "__init__",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 106,
        "args": [
          "self",
          "user"
        ],
        "decorators": [],
        "is_async": false,
        "docstring": null
      },
      {
        "name": "messages",
        "type": "function",
        "file": "pharmacy_billing\\tests.py",
        "line": 113,
        "args": [
          "self"
        ],
        "decorators": [
          "property"
        ],
        "is_async": false,
        "docstring": null
      }
    ],
    "other": []
  },
  "hms": [],
  "root_scripts": [
    {
      "name": "run_command",
      "type": "function",
      "file": "apply_profile_fix.py",
      "line": 10,
      "args": [
        "command",
        "description"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Run a command and return success status"
    },
    {
      "name": "main",
      "type": "function",
      "file": "apply_profile_fix.py",
      "line": 33,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Main function to apply fixes"
    },
    {
      "name": "HMSComprehensiveTest.__init__",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 41,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "HMSComprehensiveTest.log_test",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 51,
      "args": [
        "self",
        "test_name",
        "status",
        "message",
        "response_code"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Log test results"
    },
    {
      "name": "HMSComprehensiveTest.setup_test_data",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 66,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Create test data for comprehensive testing"
    },
    {
      "name": "HMSComprehensiveTest.test_authentication_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 208,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test user authentication and authorization"
    },
    {
      "name": "HMSComprehensiveTest.test_patient_management",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 236,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test patient registration, update, and management"
    },
    {
      "name": "HMSComprehensiveTest.test_doctor_management",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 286,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test doctor profiles and management"
    },
    {
      "name": "HMSComprehensiveTest.test_appointment_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 306,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test appointment booking and management"
    },
    {
      "name": "HMSComprehensiveTest.test_pharmacy_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 330,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test pharmacy and prescription management"
    },
    {
      "name": "HMSComprehensiveTest.test_laboratory_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 370,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test laboratory test management"
    },
    {
      "name": "HMSComprehensiveTest.test_billing_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 385,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test billing and payment processing"
    },
    {
      "name": "HMSComprehensiveTest.test_inpatient_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 428,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test inpatient management"
    },
    {
      "name": "HMSComprehensiveTest.test_hr_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 447,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test HR management"
    },
    {
      "name": "HMSComprehensiveTest.test_reporting_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 466,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test reporting functionality"
    },
    {
      "name": "HMSComprehensiveTest.test_nhia_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 480,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test NHIA integration"
    },
    {
      "name": "HMSComprehensiveTest.test_theatre_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 495,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test theatre/surgery management"
    },
    {
      "name": "HMSComprehensiveTest.test_api_endpoints",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 507,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test API functionality"
    },
    {
      "name": "HMSComprehensiveTest.test_dashboard_system",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 517,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test dashboard functionality"
    },
    {
      "name": "HMSComprehensiveTest.test_core_functionality",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 529,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test core system functionality"
    },
    {
      "name": "HMSComprehensiveTest.run_all_tests",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 550,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Run all test suites"
    },
    {
      "name": "HMSComprehensiveTest.generate_test_report",
      "type": "method",
      "class": "HMSComprehensiveTest",
      "file": "comprehensive_test.py",
      "line": 582,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Generate comprehensive test report"
    },
    {
      "name": "__init__",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 41,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "log_test",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 51,
      "args": [
        "self",
        "test_name",
        "status",
        "message",
        "response_code"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Log test results"
    },
    {
      "name": "setup_test_data",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 66,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Create test data for comprehensive testing"
    },
    {
      "name": "test_authentication_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 208,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test user authentication and authorization"
    },
    {
      "name": "test_patient_management",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 236,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test patient registration, update, and management"
    },
    {
      "name": "test_doctor_management",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 286,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test doctor profiles and management"
    },
    {
      "name": "test_appointment_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 306,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test appointment booking and management"
    },
    {
      "name": "test_pharmacy_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 330,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test pharmacy and prescription management"
    },
    {
      "name": "test_laboratory_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 370,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test laboratory test management"
    },
    {
      "name": "test_billing_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 385,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test billing and payment processing"
    },
    {
      "name": "test_inpatient_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 428,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test inpatient management"
    },
    {
      "name": "test_hr_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 447,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test HR management"
    },
    {
      "name": "test_reporting_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 466,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test reporting functionality"
    },
    {
      "name": "test_nhia_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 480,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test NHIA integration"
    },
    {
      "name": "test_theatre_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 495,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test theatre/surgery management"
    },
    {
      "name": "test_api_endpoints",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 507,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test API functionality"
    },
    {
      "name": "test_dashboard_system",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 517,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test dashboard functionality"
    },
    {
      "name": "test_core_functionality",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 529,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Test core system functionality"
    },
    {
      "name": "run_all_tests",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 550,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Run all test suites"
    },
    {
      "name": "generate_test_report",
      "type": "function",
      "file": "comprehensive_test.py",
      "line": 582,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Generate comprehensive test report"
    },
    {
      "name": "create_medication_dispensing_service",
      "type": "function",
      "file": "create_dispensing_service.py",
      "line": 10,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "debug_dispensing_logic",
      "type": "function",
      "file": "debug_dispensing_view.py",
      "line": 8,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Debug the exact logic used in the dispensing view"
    },
    {
      "name": "debug_prescription_6",
      "type": "function",
      "file": "debug_prescription_6.py",
      "line": 16,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Debug prescription 6 and its invoice"
    },
    {
      "name": "debug_prescription_state",
      "type": "function",
      "file": "debug_prescription_state.py",
      "line": 16,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Debug the current state of prescription ID 5"
    },
    {
      "name": "demonstrate_payment_access",
      "type": "function",
      "file": "demo_payment_access.py",
      "line": 21,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Demonstrate how to access payment functionality for medications"
    },
    {
      "name": "show_payment_form_structure",
      "type": "function",
      "file": "demo_payment_access.py",
      "line": 101,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Show the structure of the payment form"
    },
    {
      "name": "show_system_integration",
      "type": "function",
      "file": "demo_payment_access.py",
      "line": 129,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Show how payment integrates with the system"
    },
    {
      "name": "generate_secret_key",
      "type": "function",
      "file": "deployment_config.py",
      "line": 24,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Generate a secure secret key for Django settings"
    },
    {
      "name": "create_env_file",
      "type": "function",
      "file": "deployment_config.py",
      "line": 28,
      "args": [
        "deployment_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Create a .env file with appropriate settings"
    },
    {
      "name": "create_wsgi_file",
      "type": "function",
      "file": "deployment_config.py",
      "line": 67,
      "args": [
        "deployment_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Create a WSGI file for production deployment"
    },
    {
      "name": "collect_static_files",
      "type": "function",
      "file": "deployment_config.py",
      "line": 93,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Collect static files for production"
    },
    {
      "name": "main",
      "type": "function",
      "file": "deployment_config.py",
      "line": 102,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "DepartmentIdFixer.fix_invalid_department_ids",
      "type": "method",
      "class": "DepartmentIdFixer",
      "file": "fix_invalid_department_ids.py",
      "line": 25,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Fix any invalid department_id values in the database."
    },
    {
      "name": "fix_invalid_department_ids",
      "type": "function",
      "file": "fix_invalid_department_ids.py",
      "line": 25,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Fix any invalid department_id values in the database."
    },
    {
      "name": "fix_prescription_invoice",
      "type": "function",
      "file": "fix_prescription_invoice.py",
      "line": 17,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Fix the invoice for prescription ID 5"
    },
    {
      "name": "fix_file",
      "type": "function",
      "file": "fix_profile_references.py",
      "line": 9,
      "args": [
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Fix custom_profile references in a single file"
    },
    {
      "name": "main",
      "type": "function",
      "file": "fix_profile_references.py",
      "line": 29,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Main function to fix all files"
    },
    {
      "name": "FunctionDiscovery.__init__",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 15,
      "args": [
        "self",
        "root_dir"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "FunctionDiscovery.discover_all_functions",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 25,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Discover all functions in the HMS codebase"
    },
    {
      "name": "FunctionDiscovery.analyze_app",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 42,
      "args": [
        "self",
        "app_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Analyze a Django app directory"
    },
    {
      "name": "FunctionDiscovery.analyze_directory",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 73,
      "args": [
        "self",
        "dir_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Analyze a directory for Python functions"
    },
    {
      "name": "FunctionDiscovery.analyze_root_scripts",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 90,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Analyze root-level Python scripts"
    },
    {
      "name": "FunctionDiscovery.categorize_file",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 104,
      "args": [
        "self",
        "file_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Categorize a Python file based on its path and name"
    },
    {
      "name": "FunctionDiscovery.extract_functions_from_file",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 131,
      "args": [
        "self",
        "file_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Extract all functions and methods from a Python file"
    },
    {
      "name": "FunctionDiscovery.get_decorator_name",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 190,
      "args": [
        "self",
        "decorator"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Extract decorator name from AST node"
    },
    {
      "name": "FunctionDiscovery.generate_report",
      "type": "method",
      "class": "FunctionDiscovery",
      "file": "function_discovery.py",
      "line": 203,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Generate a comprehensive report of all discovered functions"
    },
    {
      "name": "__init__",
      "type": "function",
      "file": "function_discovery.py",
      "line": 15,
      "args": [
        "self",
        "root_dir"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "discover_all_functions",
      "type": "function",
      "file": "function_discovery.py",
      "line": 25,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Discover all functions in the HMS codebase"
    },
    {
      "name": "analyze_app",
      "type": "function",
      "file": "function_discovery.py",
      "line": 42,
      "args": [
        "self",
        "app_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Analyze a Django app directory"
    },
    {
      "name": "analyze_directory",
      "type": "function",
      "file": "function_discovery.py",
      "line": 73,
      "args": [
        "self",
        "dir_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Analyze a directory for Python functions"
    },
    {
      "name": "analyze_root_scripts",
      "type": "function",
      "file": "function_discovery.py",
      "line": 90,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Analyze root-level Python scripts"
    },
    {
      "name": "categorize_file",
      "type": "function",
      "file": "function_discovery.py",
      "line": 104,
      "args": [
        "self",
        "file_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Categorize a Python file based on its path and name"
    },
    {
      "name": "extract_functions_from_file",
      "type": "function",
      "file": "function_discovery.py",
      "line": 131,
      "args": [
        "self",
        "file_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Extract all functions and methods from a Python file"
    },
    {
      "name": "get_decorator_name",
      "type": "function",
      "file": "function_discovery.py",
      "line": 190,
      "args": [
        "self",
        "decorator"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Extract decorator name from AST node"
    },
    {
      "name": "generate_report",
      "type": "function",
      "file": "function_discovery.py",
      "line": 203,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Generate a comprehensive report of all discovered functions"
    },
    {
      "name": "main",
      "type": "function",
      "file": "manage.py",
      "line": 7,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Run administrative tasks."
    },
    {
      "name": "setup_inventory_for_prescription_3",
      "type": "function",
      "file": "setup_test_inventory.py",
      "line": 9,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Set up inventory for prescription 3"
    },
    {
      "name": "test_wallet_transfer_implementation",
      "type": "function",
      "file": "simple_wallet_test.py",
      "line": 6,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test wallet transfer implementation by checking code structure"
    },
    {
      "name": "test_wallet_system_integration",
      "type": "function",
      "file": "simple_wallet_test.py",
      "line": 146,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test integration with existing wallet system"
    },
    {
      "name": "test_ajax_endpoint",
      "type": "function",
      "file": "test_ajax.py",
      "line": 15,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "test_stock_quantities_endpoint",
      "type": "function",
      "file": "test_ajax_endpoint.py",
      "line": 12,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test the stock quantities AJAX endpoint"
    },
    {
      "name": "test_imports",
      "type": "function",
      "file": "test_dispensed_items.py",
      "line": 13,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test that all imports work correctly"
    },
    {
      "name": "test_model_structure",
      "type": "function",
      "file": "test_dispensed_items.py",
      "line": 25,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test that models have the expected fields"
    },
    {
      "name": "test_form_structure",
      "type": "function",
      "file": "test_dispensed_items.py",
      "line": 49,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test that the search form has all expected fields"
    },
    {
      "name": "main",
      "type": "function",
      "file": "test_dispensed_items.py",
      "line": 74,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Run all tests"
    },
    {
      "name": "test_dispensing_workflow",
      "type": "function",
      "file": "test_dispensing.py",
      "line": 21,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test the dispensing workflow"
    },
    {
      "name": "create_test_inventory",
      "type": "function",
      "file": "test_dispensing.py",
      "line": 72,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Create test inventory if needed"
    },
    {
      "name": "create_test_data",
      "type": "function",
      "file": "test_dispensing.py",
      "line": 110,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Create test data if prescription 2 doesn't exist"
    },
    {
      "name": "create_test_dispensary",
      "type": "function",
      "file": "test_dispensing.py",
      "line": 186,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Create test dispensary if needed"
    },
    {
      "name": "test_dispensing_data",
      "type": "function",
      "file": "test_dispensing_simple.py",
      "line": 8,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test if all the data is set up correctly for dispensing"
    },
    {
      "name": "test_ajax_logic",
      "type": "function",
      "file": "test_dispensing_simple.py",
      "line": 62,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test the logic that the AJAX endpoint uses"
    },
    {
      "name": "test_dispensing_view",
      "type": "function",
      "file": "test_dispensing_view.py",
      "line": 12,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test the dispensing view directly"
    },
    {
      "name": "test_payment_verification_system",
      "type": "function",
      "file": "test_payment_verification.py",
      "line": 27,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test the payment verification system for medication dispensing"
    },
    {
      "name": "test_dispensing_workflow",
      "type": "function",
      "file": "test_payment_verification.py",
      "line": 119,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test the complete dispensing workflow with payment verification"
    },
    {
      "name": "test_direct_prescription_creation",
      "type": "function",
      "file": "test_prescription_creation.py",
      "line": 15,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "test_pricing_logic",
      "type": "function",
      "file": "test_pricing_logic.py",
      "line": 17,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test the new pricing logic for different patient types"
    },
    {
      "name": "test_non_nhia_patient",
      "type": "function",
      "file": "test_pricing_logic.py",
      "line": 96,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test with a non-NHIA patient if available"
    },
    {
      "name": "test_profile_access",
      "type": "function",
      "file": "test_profile_fix.py",
      "line": 19,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test that user.profile works correctly"
    },
    {
      "name": "test_template_context",
      "type": "function",
      "file": "test_profile_fix.py",
      "line": 55,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test template context that would be used in templates"
    },
    {
      "name": "test_retainership_workflow",
      "type": "function",
      "file": "test_retainership_workflow.py",
      "line": 11,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "test_wallet_transfer",
      "type": "function",
      "file": "test_wallet_transfer.py",
      "line": 23,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test wallet transfer functionality"
    },
    {
      "name": "test_enhanced_transfer_method",
      "type": "function",
      "file": "test_wallet_transfer.py",
      "line": 124,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test the new enhanced transfer_to method"
    },
    {
      "name": "test_transfer_validation",
      "type": "function",
      "file": "test_wallet_transfer.py",
      "line": 216,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Test transfer validation logic"
    },
    {
      "name": "main",
      "type": "function",
      "file": "update_superuser.py",
      "line": 18,
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "Run the update_superuser_phone management command"
    },
    {
      "name": "update_template",
      "type": "function",
      "file": "update_templates.py",
      "line": 4,
      "args": [
        "file_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null
    },
    {
      "name": "process_directory",
      "type": "function",
      "file": "update_templates.py",
      "line": 32,
      "args": [
        "directory"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null
    }
  ]
}