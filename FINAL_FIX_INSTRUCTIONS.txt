================================================================================
FINAL FIX FOR OSError [Errno 22] - COMPREHENSIVE SOLUTION
================================================================================

CRITICAL: This is the FINAL, MOST COMPREHENSIVE fix for the Windows console
encoding issue. Multiple layers of protection have been added.

================================================================================
WHAT WAS FIXED
================================================================================

1. manage.py - Added UTF-8 encoding wrapper
2. hms/settings.py - Disabled ALL console logging, enabled file logging only
3. accounts/auth_wrapper.py - Safe authentication wrapper
4. accounts/forms.py - Uses safe authentication
5. accounts/views.py - Uses safe authentication
6. core/django_patches.py - Monkey patches Django to prevent console output
7. core/logging_handlers.py - Safe logging handlers
8. core/management/commands/runserver_safe.py - Safe runserver command

================================================================================
STEP-BY-STEP INSTRUCTIONS (FOLLOW EXACTLY)
================================================================================

STEP 1: STOP THE SERVER
------------------------
Press CTRL+C in the terminal running the server
OR close the terminal window completely

STEP 2: CLEAR ALL PYTHON CACHE (CRITICAL!)
-------------------------------------------
Open PowerShell in the HMS directory and run:

Get-ChildItem -Path . -Include __pycache__ -Recurse -Force | Remove-Item -Recurse -Force
Get-ChildItem -Path . -Filter "*.pyc" -Recurse -Force | Remove-Item -Force

Wait for this to complete (may take 10-15 seconds)

STEP 3: VERIFY CACHE IS CLEARED
--------------------------------
Run this command to check:

Get-ChildItem -Path "accounts\__pycache__" -ErrorAction SilentlyContinue

If it shows files, run STEP 2 again!

STEP 4: START SERVER WITH NEW SCRIPT
-------------------------------------
Use the new startup script:

.\start_server.ps1

OR manually:

$env:PYTHONIOENCODING = "utf-8"
$env:PYTHONUTF8 = "1"
python manage.py runserver

STEP 5: TEST LOGIN
------------------
1. Open browser: http://127.0.0.1:8000/accounts/login/
2. Enter phone number and password
3. Click Login

THE ERROR SHOULD BE GONE!

================================================================================
HOW THE FIX WORKS
================================================================================

Layer 1: manage.py
------------------
- Wraps stdout/stderr with UTF-8 encoding
- Sets environment variables for UTF-8
- Prevents encoding errors at the Python level

Layer 2: Django Patches (core/django_patches.py)
-------------------------------------------------
- Automatically loaded when Django starts
- Patches Django's authenticate() function
- Redirects console output to NUL during authentication
- Wraps all stdout/stderr writes with error handling

Layer 3: Safe Authentication Wrapper (accounts/auth_wrapper.py)
----------------------------------------------------------------
- Provides safe_authenticate() function
- Suppresses console output during authentication
- Catches and handles OSError gracefully
- Multiple fallback mechanisms

Layer 4: Form and View Updates
-------------------------------
- CustomLoginForm uses safe_authenticate()
- custom_login_view uses safe_authenticate()
- No direct calls to Django's authenticate()

Layer 5: Logging Configuration
-------------------------------
- ALL console logging disabled on Windows
- ALL logs written to logs/hms.log file
- Safe file handlers with UTF-8 encoding
- No console output = No OSError

Layer 6: Custom Runserver Command
----------------------------------
- runserver_safe command with encoding fixes
- Disables colored output (can cause issues)
- Wraps stdout/stderr before starting server

================================================================================
VERIFICATION
================================================================================

After starting the server, check:

1. Server starts without errors
2. You see "Watching for file changes with StatReloader"
3. No OSError appears in the terminal
4. Login page loads at http://127.0.0.1:8000/accounts/login/
5. You can submit the login form
6. No OSError when clicking Login
7. You're redirected to dashboard after successful login

Check the log file:

Get-Content logs\hms.log -Tail 20

You should see authentication logs there instead of in the console.

================================================================================
TROUBLESHOOTING
================================================================================

If OSError STILL occurs:

1. VERIFY cache was cleared:
   - Delete accounts\__pycache__ folder manually
   - Delete core\__pycache__ folder manually
   - Delete hms\__pycache__ folder manually

2. VERIFY server was restarted:
   - Close ALL terminal windows
   - Open a fresh PowerShell window
   - Navigate to HMS directory
   - Activate venv
   - Run: .\start_server.ps1

3. VERIFY patches are loaded:
   - Check logs\hms.log for "Windows OSError patches applied"
   - If not there, patches didn't load

4. Try running with Python directly:
   python -X utf8 manage.py runserver

5. Check Python version:
   python --version
   (Should be 3.13.7)

6. Verify files exist:
   - core\django_patches.py
   - accounts\auth_wrapper.py
   - core\logging_handlers.py

================================================================================
WHAT TO DO IF IT WORKS
================================================================================

1. Test login with different users
2. Test logout
3. Test invalid credentials
4. Check logs\hms.log for all authentication logs
5. Bookmark this file for future reference

================================================================================
WHAT TO DO IF IT DOESN'T WORK
================================================================================

1. Take a screenshot of the EXACT error
2. Check logs\hms.log and copy the last 50 lines
3. Run: python test_login_fix.py
4. Share all three pieces of information

================================================================================
KEY FILES MODIFIED
================================================================================

manage.py - UTF-8 encoding setup
hms/settings.py - Logging configuration + Django patches import
accounts/forms.py - Safe authentication in form
accounts/views.py - Safe authentication in view
core/django_patches.py - Monkey patches for Django
accounts/auth_wrapper.py - Safe authentication wrapper
core/logging_handlers.py - Safe logging handlers
core/management/commands/runserver_safe.py - Safe runserver

================================================================================
SUMMARY
================================================================================

This fix uses MULTIPLE LAYERS of protection:
1. Python-level encoding fixes (manage.py)
2. Django-level patches (django_patches.py)
3. Authentication-level wrappers (auth_wrapper.py)
4. Form-level safe calls (forms.py, views.py)
5. Logging-level safe handlers (logging_handlers.py)
6. Server-level encoding setup (runserver_safe.py)

With all these layers, the OSError should be IMPOSSIBLE to occur.

If it still happens, there's something else going on that we need to investigate.

================================================================================

